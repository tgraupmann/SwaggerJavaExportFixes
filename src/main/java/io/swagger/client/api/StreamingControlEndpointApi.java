/*
 * Polling API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.ResponseOutputModelListEntityStreamingModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StreamingControlEndpointApi {
    private ApiClient apiClient;

    public StreamingControlEndpointApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StreamingControlEndpointApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for streamingLatestLiveStreams */
    private okhttp3.Call streamingLatestLiveStreamsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/API/Streaming/Latest".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return a list of the top 12 latest live streams for any game
     * 
     * @return ResponseOutputModelListEntityStreamingModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListEntityStreamingModel streamingLatestLiveStreams() throws ApiException {
        ApiResponse<ResponseOutputModelListEntityStreamingModel> resp = streamingLatestLiveStreamsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return a list of the top 12 latest live streams for any game
     * 
     * @return ApiResponse&lt;ResponseOutputModelListEntityStreamingModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListEntityStreamingModel> streamingLatestLiveStreamsWithHttpInfo() throws ApiException {
        okhttp3.Call call = streamingLatestLiveStreamsCall(null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListEntityStreamingModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a list of the top 12 latest live streams for any game (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call streamingLatestLiveStreamsAsync(final ApiCallback<ResponseOutputModelListEntityStreamingModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = streamingLatestLiveStreamsCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListEntityStreamingModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for streamingLatestLiveStreamsAdvancedSearch */
    private okhttp3.Call streamingLatestLiveStreamsAdvancedSearchCall(Integer topStreamsCount, List<String> gameShortCodeList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'topStreamsCount' is set
        if (topStreamsCount == null) {
            throw new ApiException("Missing the required parameter 'topStreamsCount' when calling streamingLatestLiveStreamsAdvancedSearch(Async)");
        }
        
        // verify the required parameter 'gameShortCodeList' is set
        if (gameShortCodeList == null) {
            throw new ApiException("Missing the required parameter 'gameShortCodeList' when calling streamingLatestLiveStreamsAdvancedSearch(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/API/Streaming/Search".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (topStreamsCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "topStreamsCount", topStreamsCount));
        if (gameShortCodeList != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "gameShortCodeList", gameShortCodeList));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return a list of the top latest live streams based on advanced search
     * 
     * @param topStreamsCount  (required)
     * @param gameShortCodeList  (required)
     * @return ResponseOutputModelListEntityStreamingModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListEntityStreamingModel streamingLatestLiveStreamsAdvancedSearch(Integer topStreamsCount, List<String> gameShortCodeList) throws ApiException {
        ApiResponse<ResponseOutputModelListEntityStreamingModel> resp = streamingLatestLiveStreamsAdvancedSearchWithHttpInfo(topStreamsCount, gameShortCodeList);
        return resp.getData();
    }

    /**
     * Return a list of the top latest live streams based on advanced search
     * 
     * @param topStreamsCount  (required)
     * @param gameShortCodeList  (required)
     * @return ApiResponse&lt;ResponseOutputModelListEntityStreamingModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListEntityStreamingModel> streamingLatestLiveStreamsAdvancedSearchWithHttpInfo(Integer topStreamsCount, List<String> gameShortCodeList) throws ApiException {
        okhttp3.Call call = streamingLatestLiveStreamsAdvancedSearchCall(topStreamsCount, gameShortCodeList, null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListEntityStreamingModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a list of the top latest live streams based on advanced search (asynchronously)
     * 
     * @param topStreamsCount  (required)
     * @param gameShortCodeList  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call streamingLatestLiveStreamsAdvancedSearchAsync(Integer topStreamsCount, List<String> gameShortCodeList, final ApiCallback<ResponseOutputModelListEntityStreamingModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = streamingLatestLiveStreamsAdvancedSearchCall(topStreamsCount, gameShortCodeList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListEntityStreamingModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for streamingLatestLiveStreams_0 */
    private okhttp3.Call streamingLatestLiveStreams_0Call(Integer topStreamCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'topStreamCount' is set
        if (topStreamCount == null) {
            throw new ApiException("Missing the required parameter 'topStreamCount' when calling streamingLatestLiveStreams_0(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/API/Streaming/Latest/{topStreamCount}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "topStreamCount" + "\\}", apiClient.escapeString(topStreamCount.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return a list of the latest live streams for any game
     * 
     * @param topStreamCount  (required)
     * @return ResponseOutputModelListEntityStreamingModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListEntityStreamingModel streamingLatestLiveStreams_0(Integer topStreamCount) throws ApiException {
        ApiResponse<ResponseOutputModelListEntityStreamingModel> resp = streamingLatestLiveStreams_0WithHttpInfo(topStreamCount);
        return resp.getData();
    }

    /**
     * Return a list of the latest live streams for any game
     * 
     * @param topStreamCount  (required)
     * @return ApiResponse&lt;ResponseOutputModelListEntityStreamingModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListEntityStreamingModel> streamingLatestLiveStreams_0WithHttpInfo(Integer topStreamCount) throws ApiException {
        okhttp3.Call call = streamingLatestLiveStreams_0Call(topStreamCount, null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListEntityStreamingModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a list of the latest live streams for any game (asynchronously)
     * 
     * @param topStreamCount  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call streamingLatestLiveStreams_0Async(Integer topStreamCount, final ApiCallback<ResponseOutputModelListEntityStreamingModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = streamingLatestLiveStreams_0Call(topStreamCount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListEntityStreamingModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for streamingLatestLiveStreams_1 */
    private okhttp3.Call streamingLatestLiveStreams_1Call(String gameShortcode, Integer topStreamCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'gameShortcode' is set
        if (gameShortcode == null) {
            throw new ApiException("Missing the required parameter 'gameShortcode' when calling streamingLatestLiveStreams_1(Async)");
        }
        
        // verify the required parameter 'topStreamCount' is set
        if (topStreamCount == null) {
            throw new ApiException("Missing the required parameter 'topStreamCount' when calling streamingLatestLiveStreams_1(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/API/Streaming/{gameShortcode}/Latest/{topStreamCount}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "gameShortcode" + "\\}", apiClient.escapeString(gameShortcode.toString()))
        .replaceAll("\\{" + "topStreamCount" + "\\}", apiClient.escapeString(topStreamCount.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return a list of the latest live streams for a specific game
     * 
     * @param gameShortcode  (required)
     * @param topStreamCount  (required)
     * @return ResponseOutputModelListEntityStreamingModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListEntityStreamingModel streamingLatestLiveStreams_1(String gameShortcode, Integer topStreamCount) throws ApiException {
        ApiResponse<ResponseOutputModelListEntityStreamingModel> resp = streamingLatestLiveStreams_1WithHttpInfo(gameShortcode, topStreamCount);
        return resp.getData();
    }

    /**
     * Return a list of the latest live streams for a specific game
     * 
     * @param gameShortcode  (required)
     * @param topStreamCount  (required)
     * @return ApiResponse&lt;ResponseOutputModelListEntityStreamingModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListEntityStreamingModel> streamingLatestLiveStreams_1WithHttpInfo(String gameShortcode, Integer topStreamCount) throws ApiException {
        okhttp3.Call call = streamingLatestLiveStreams_1Call(gameShortcode, topStreamCount, null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListEntityStreamingModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a list of the latest live streams for a specific game (asynchronously)
     * 
     * @param gameShortcode  (required)
     * @param topStreamCount  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call streamingLatestLiveStreams_1Async(String gameShortcode, Integer topStreamCount, final ApiCallback<ResponseOutputModelListEntityStreamingModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = streamingLatestLiveStreams_1Call(gameShortcode, topStreamCount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListEntityStreamingModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
