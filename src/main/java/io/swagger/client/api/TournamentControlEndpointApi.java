/*
 * Polling API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.ResponseOutputModelInt64;
import io.swagger.client.model.ResponseOutputModelListTournamentMatchMessageModel;
import io.swagger.client.model.ResponseModel;
import io.swagger.client.model.ResponseOutputModelTournamentMatchCompleteOutputModel;
import io.swagger.client.model.ResponseOutputModelTournamentCompleteOutputModel;
import io.swagger.client.model.ResponseOutputModelTournamentPlayerContextModel;
import io.swagger.client.model.ResponseOutputModelListTournamentMatchMiniModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TournamentControlEndpointApi {
    private ApiClient apiClient;

    public TournamentControlEndpointApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TournamentControlEndpointApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for tournamentGetProfileGenerationTicks */
    private okhttp3.Call tournamentGetProfileGenerationTicksCall(String tournamentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'tournamentId' is set
        if (tournamentId == null) {
            throw new ApiException("Missing the required parameter 'tournamentId' when calling tournamentGetProfileGenerationTicks(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/API/Tournament/{TournamentId}/GenerationTicks".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "TournamentId" + "\\}", apiClient.escapeString(tournamentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get the Int64 Ticks at time of last model generation
     * 
     * @param tournamentId  (required)
     * @return ResponseOutputModelInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelInt64 tournamentGetProfileGenerationTicks(String tournamentId) throws ApiException {
        ApiResponse<ResponseOutputModelInt64> resp = tournamentGetProfileGenerationTicksWithHttpInfo(tournamentId);
        return resp.getData();
    }

    /**
     * Get the Int64 Ticks at time of last model generation
     * 
     * @param tournamentId  (required)
     * @return ApiResponse&lt;ResponseOutputModelInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelInt64> tournamentGetProfileGenerationTicksWithHttpInfo(String tournamentId) throws ApiException {
        okhttp3.Call call = tournamentGetProfileGenerationTicksCall(tournamentId, null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelInt64>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Int64 Ticks at time of last model generation (asynchronously)
     * 
     * @param tournamentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call tournamentGetProfileGenerationTicksAsync(String tournamentId, final ApiCallback<ResponseOutputModelInt64> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = tournamentGetProfileGenerationTicksCall(tournamentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelInt64>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for tournamentMatchGetProfileGenerationTicks */
    private okhttp3.Call tournamentMatchGetProfileGenerationTicksCall(String tournamentMatchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'tournamentMatchId' is set
        if (tournamentMatchId == null) {
            throw new ApiException("Missing the required parameter 'tournamentMatchId' when calling tournamentMatchGetProfileGenerationTicks(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/API/Tournament/Match/{TournamentMatchId}/GenerationTicks".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "TournamentMatchId" + "\\}", apiClient.escapeString(tournamentMatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get the Int64 Ticks at time of last model generation
     * 
     * @param tournamentMatchId  (required)
     * @return ResponseOutputModelInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelInt64 tournamentMatchGetProfileGenerationTicks(String tournamentMatchId) throws ApiException {
        ApiResponse<ResponseOutputModelInt64> resp = tournamentMatchGetProfileGenerationTicksWithHttpInfo(tournamentMatchId);
        return resp.getData();
    }

    /**
     * Get the Int64 Ticks at time of last model generation
     * 
     * @param tournamentMatchId  (required)
     * @return ApiResponse&lt;ResponseOutputModelInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelInt64> tournamentMatchGetProfileGenerationTicksWithHttpInfo(String tournamentMatchId) throws ApiException {
        okhttp3.Call call = tournamentMatchGetProfileGenerationTicksCall(tournamentMatchId, null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelInt64>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Int64 Ticks at time of last model generation (asynchronously)
     * 
     * @param tournamentMatchId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call tournamentMatchGetProfileGenerationTicksAsync(String tournamentMatchId, final ApiCallback<ResponseOutputModelInt64> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = tournamentMatchGetProfileGenerationTicksCall(tournamentMatchId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelInt64>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for tournamentMatchMessageList */
    private okhttp3.Call tournamentMatchMessageListCall(String lastUpdatedDateTime, String tournamentMatchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'lastUpdatedDateTime' is set
        if (lastUpdatedDateTime == null) {
            throw new ApiException("Missing the required parameter 'lastUpdatedDateTime' when calling tournamentMatchMessageList(Async)");
        }
        
        // verify the required parameter 'tournamentMatchId' is set
        if (tournamentMatchId == null) {
            throw new ApiException("Missing the required parameter 'tournamentMatchId' when calling tournamentMatchMessageList(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/API/Tournament/Match/{TournamentMatchId}/Messaging".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "TournamentMatchId" + "\\}", apiClient.escapeString(tournamentMatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (lastUpdatedDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastUpdatedDateTime", lastUpdatedDateTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get a list of messages sent from the game server for this match
     * 
     * @param lastUpdatedDateTime  (required)
     * @param tournamentMatchId  (required)
     * @return ResponseOutputModelListTournamentMatchMessageModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListTournamentMatchMessageModel tournamentMatchMessageList(String lastUpdatedDateTime, String tournamentMatchId) throws ApiException {
        ApiResponse<ResponseOutputModelListTournamentMatchMessageModel> resp = tournamentMatchMessageListWithHttpInfo(lastUpdatedDateTime, tournamentMatchId);
        return resp.getData();
    }

    /**
     * Get a list of messages sent from the game server for this match
     * 
     * @param lastUpdatedDateTime  (required)
     * @param tournamentMatchId  (required)
     * @return ApiResponse&lt;ResponseOutputModelListTournamentMatchMessageModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListTournamentMatchMessageModel> tournamentMatchMessageListWithHttpInfo(String lastUpdatedDateTime, String tournamentMatchId) throws ApiException {
        okhttp3.Call call = tournamentMatchMessageListCall(lastUpdatedDateTime, tournamentMatchId, null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentMatchMessageModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of messages sent from the game server for this match (asynchronously)
     * 
     * @param lastUpdatedDateTime  (required)
     * @param tournamentMatchId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call tournamentMatchMessageListAsync(String lastUpdatedDateTime, String tournamentMatchId, final ApiCallback<ResponseOutputModelListTournamentMatchMessageModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = tournamentMatchMessageListCall(lastUpdatedDateTime, tournamentMatchId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentMatchMessageModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for tournamentMatchProfile */
    private okhttp3.Call tournamentMatchProfileCall(String lastUpdatedDateTime, String tournamentMatchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'lastUpdatedDateTime' is set
        if (lastUpdatedDateTime == null) {
            throw new ApiException("Missing the required parameter 'lastUpdatedDateTime' when calling tournamentMatchProfile(Async)");
        }
        
        // verify the required parameter 'tournamentMatchId' is set
        if (tournamentMatchId == null) {
            throw new ApiException("Missing the required parameter 'tournamentMatchId' when calling tournamentMatchProfile(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/API/Tournament/Match/{TournamentMatchId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "TournamentMatchId" + "\\}", apiClient.escapeString(tournamentMatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (lastUpdatedDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastUpdatedDateTime", lastUpdatedDateTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get the profile and lobby for a specific tournament match
     * 
     * @param lastUpdatedDateTime  (required)
     * @param tournamentMatchId  (required)
     * @return ResponseOutputModelTournamentMatchCompleteOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelTournamentMatchCompleteOutputModel tournamentMatchProfile(String lastUpdatedDateTime, String tournamentMatchId) throws ApiException {
        ApiResponse<ResponseOutputModelTournamentMatchCompleteOutputModel> resp = tournamentMatchProfileWithHttpInfo(lastUpdatedDateTime, tournamentMatchId);
        return resp.getData();
    }

    /**
     * Get the profile and lobby for a specific tournament match
     * 
     * @param lastUpdatedDateTime  (required)
     * @param tournamentMatchId  (required)
     * @return ApiResponse&lt;ResponseOutputModelTournamentMatchCompleteOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelTournamentMatchCompleteOutputModel> tournamentMatchProfileWithHttpInfo(String lastUpdatedDateTime, String tournamentMatchId) throws ApiException {
        okhttp3.Call call = tournamentMatchProfileCall(lastUpdatedDateTime, tournamentMatchId, null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelTournamentMatchCompleteOutputModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the profile and lobby for a specific tournament match (asynchronously)
     * 
     * @param lastUpdatedDateTime  (required)
     * @param tournamentMatchId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call tournamentMatchProfileAsync(String lastUpdatedDateTime, String tournamentMatchId, final ApiCallback<ResponseOutputModelTournamentMatchCompleteOutputModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = tournamentMatchProfileCall(lastUpdatedDateTime, tournamentMatchId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelTournamentMatchCompleteOutputModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for tournamentMatchTriggerTimedProcessing */
    private okhttp3.Call tournamentMatchTriggerTimedProcessingCall(String tournamentMatchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'tournamentMatchId' is set
        if (tournamentMatchId == null) {
            throw new ApiException("Missing the required parameter 'tournamentMatchId' when calling tournamentMatchTriggerTimedProcessing(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/API/Tournament/Match/{TournamentMatchId}/Timer/Trigger".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "TournamentMatchId" + "\\}", apiClient.escapeString(tournamentMatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Trigger Match Timed Processing, such as Map Voting
     * 
     * @param tournamentMatchId  (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseModel tournamentMatchTriggerTimedProcessing(String tournamentMatchId) throws ApiException {
        ApiResponse<ResponseModel> resp = tournamentMatchTriggerTimedProcessingWithHttpInfo(tournamentMatchId);
        return resp.getData();
    }

    /**
     * Trigger Match Timed Processing, such as Map Voting
     * 
     * @param tournamentMatchId  (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseModel> tournamentMatchTriggerTimedProcessingWithHttpInfo(String tournamentMatchId) throws ApiException {
        okhttp3.Call call = tournamentMatchTriggerTimedProcessingCall(tournamentMatchId, null, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Trigger Match Timed Processing, such as Map Voting (asynchronously)
     * 
     * @param tournamentMatchId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call tournamentMatchTriggerTimedProcessingAsync(String tournamentMatchId, final ApiCallback<ResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = tournamentMatchTriggerTimedProcessingCall(tournamentMatchId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for tournamentProfile */
    private okhttp3.Call tournamentProfileCall(String lastUpdatedDateTime, String tournamentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'lastUpdatedDateTime' is set
        if (lastUpdatedDateTime == null) {
            throw new ApiException("Missing the required parameter 'lastUpdatedDateTime' when calling tournamentProfile(Async)");
        }
        
        // verify the required parameter 'tournamentId' is set
        if (tournamentId == null) {
            throw new ApiException("Missing the required parameter 'tournamentId' when calling tournamentProfile(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/API/Tournament/{TournamentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "TournamentId" + "\\}", apiClient.escapeString(tournamentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (lastUpdatedDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastUpdatedDateTime", lastUpdatedDateTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get the profile details for a specific tournament
     * 
     * @param lastUpdatedDateTime  (required)
     * @param tournamentId  (required)
     * @return ResponseOutputModelTournamentCompleteOutputModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelTournamentCompleteOutputModel tournamentProfile(String lastUpdatedDateTime, String tournamentId) throws ApiException {
        ApiResponse<ResponseOutputModelTournamentCompleteOutputModel> resp = tournamentProfileWithHttpInfo(lastUpdatedDateTime, tournamentId);
        return resp.getData();
    }

    /**
     * Get the profile details for a specific tournament
     * 
     * @param lastUpdatedDateTime  (required)
     * @param tournamentId  (required)
     * @return ApiResponse&lt;ResponseOutputModelTournamentCompleteOutputModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelTournamentCompleteOutputModel> tournamentProfileWithHttpInfo(String lastUpdatedDateTime, String tournamentId) throws ApiException {
        okhttp3.Call call = tournamentProfileCall(lastUpdatedDateTime, tournamentId, null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelTournamentCompleteOutputModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the profile details for a specific tournament (asynchronously)
     * 
     * @param lastUpdatedDateTime  (required)
     * @param tournamentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call tournamentProfileAsync(String lastUpdatedDateTime, String tournamentId, final ApiCallback<ResponseOutputModelTournamentCompleteOutputModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = tournamentProfileCall(lastUpdatedDateTime, tournamentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelTournamentCompleteOutputModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for tournamentProfileUserContext */
    private okhttp3.Call tournamentProfileUserContextCall(String tournamentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'tournamentId' is set
        if (tournamentId == null) {
            throw new ApiException("Missing the required parameter 'tournamentId' when calling tournamentProfileUserContext(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/API/Tournament/{TournamentId}/Context".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "TournamentId" + "\\}", apiClient.escapeString(tournamentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get the user context for a specific tournament
     * 
     * @param tournamentId  (required)
     * @return ResponseOutputModelTournamentPlayerContextModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelTournamentPlayerContextModel tournamentProfileUserContext(String tournamentId) throws ApiException {
        ApiResponse<ResponseOutputModelTournamentPlayerContextModel> resp = tournamentProfileUserContextWithHttpInfo(tournamentId);
        return resp.getData();
    }

    /**
     * Get the user context for a specific tournament
     * 
     * @param tournamentId  (required)
     * @return ApiResponse&lt;ResponseOutputModelTournamentPlayerContextModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelTournamentPlayerContextModel> tournamentProfileUserContextWithHttpInfo(String tournamentId) throws ApiException {
        okhttp3.Call call = tournamentProfileUserContextCall(tournamentId, null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelTournamentPlayerContextModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the user context for a specific tournament (asynchronously)
     * 
     * @param tournamentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call tournamentProfileUserContextAsync(String tournamentId, final ApiCallback<ResponseOutputModelTournamentPlayerContextModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = tournamentProfileUserContextCall(tournamentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelTournamentPlayerContextModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for tournamentUnresolvedAssistanceList */
    private okhttp3.Call tournamentUnresolvedAssistanceListCall(String tournamentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'tournamentId' is set
        if (tournamentId == null) {
            throw new ApiException("Missing the required parameter 'tournamentId' when calling tournamentUnresolvedAssistanceList(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/API/Tournament/{TournamentId}/Assistance/Unresolved".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "TournamentId" + "\\}", apiClient.escapeString(tournamentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get a list of pending assistance requests for a tournament
     * 
     * @param tournamentId  (required)
     * @return ResponseOutputModelListTournamentMatchMiniModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListTournamentMatchMiniModel tournamentUnresolvedAssistanceList(String tournamentId) throws ApiException {
        ApiResponse<ResponseOutputModelListTournamentMatchMiniModel> resp = tournamentUnresolvedAssistanceListWithHttpInfo(tournamentId);
        return resp.getData();
    }

    /**
     * Get a list of pending assistance requests for a tournament
     * 
     * @param tournamentId  (required)
     * @return ApiResponse&lt;ResponseOutputModelListTournamentMatchMiniModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListTournamentMatchMiniModel> tournamentUnresolvedAssistanceListWithHttpInfo(String tournamentId) throws ApiException {
        okhttp3.Call call = tournamentUnresolvedAssistanceListCall(tournamentId, null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentMatchMiniModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of pending assistance requests for a tournament (asynchronously)
     * 
     * @param tournamentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call tournamentUnresolvedAssistanceListAsync(String tournamentId, final ApiCallback<ResponseOutputModelListTournamentMatchMiniModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = tournamentUnresolvedAssistanceListCall(tournamentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentMatchMiniModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
