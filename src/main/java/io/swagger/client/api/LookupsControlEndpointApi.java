/*
 * Polling API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.ResponseOutputModelListAddressCountryModel;
import io.swagger.client.model.ResponseOutputModelListString;
import io.swagger.client.model.ResponseOutputModelListGameTitleCallbackTemplateModel;
import io.swagger.client.model.ResponseOutputModelListGameTitleValidationMethodTypeModel;
import io.swagger.client.model.ResponseOutputModelListGamingServerRegionModel;
import io.swagger.client.model.ResponseOutputModelListPlayerRankingLevel;
import io.swagger.client.model.ResponseOutputModelListTournamentRoundRuleMapVotingStyleModel;
import io.swagger.client.model.ResponseOutputModelListTeamRosterRoleModel;
import io.swagger.client.model.ResponseOutputModelListTournamentQualifierTieBreakerTypeModel;
import io.swagger.client.model.ResponseOutputModelListStreamingServiceModel;
import io.swagger.client.model.ResponseOutputModelListTournamentJoinTypeModel;
import io.swagger.client.model.ResponseOutputModelListTournamentPairingTypeModel;
import io.swagger.client.model.ResponseOutputModelListTournamentPrizeFundingTypeModel;
import io.swagger.client.model.ResponseOutputModelListTournamentSeedingTypeModel;
import io.swagger.client.model.ResponseOutputModelListTournamentTypeModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LookupsControlEndpointApi {
    private ApiClient apiClient;

    public LookupsControlEndpointApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LookupsControlEndpointApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for lookupsCountryList */
    private com.squareup.okhttp.Call lookupsCountryListCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/API/Lookups/CountryList".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return list of all countries supported.
     * 
     * @return ResponseOutputModelListAddressCountryModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListAddressCountryModel lookupsCountryList() throws ApiException {
        ApiResponse<ResponseOutputModelListAddressCountryModel> resp = lookupsCountryListWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return list of all countries supported.
     * 
     * @return ApiResponse&lt;ResponseOutputModelListAddressCountryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListAddressCountryModel> lookupsCountryListWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lookupsCountryListCall(null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListAddressCountryModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return list of all countries supported. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookupsCountryListAsync(final ApiCallback<ResponseOutputModelListAddressCountryModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookupsCountryListCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListAddressCountryModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for lookupsGamePlatforms */
    private com.squareup.okhttp.Call lookupsGamePlatformsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/API/Lookups/GamePlatforms".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return a list of all game platforms.
     * 
     * @return ResponseOutputModelListString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListString lookupsGamePlatforms() throws ApiException {
        ApiResponse<ResponseOutputModelListString> resp = lookupsGamePlatformsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return a list of all game platforms.
     * 
     * @return ApiResponse&lt;ResponseOutputModelListString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListString> lookupsGamePlatformsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lookupsGamePlatformsCall(null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListString>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a list of all game platforms. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookupsGamePlatformsAsync(final ApiCallback<ResponseOutputModelListString> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookupsGamePlatformsCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListString>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for lookupsGameTitleCallbackTemplates */
    private com.squareup.okhttp.Call lookupsGameTitleCallbackTemplatesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/API/Lookups/GameTitleCallbackTemplates".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return a list of all game join schemas.
     * 
     * @return ResponseOutputModelListGameTitleCallbackTemplateModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListGameTitleCallbackTemplateModel lookupsGameTitleCallbackTemplates() throws ApiException {
        ApiResponse<ResponseOutputModelListGameTitleCallbackTemplateModel> resp = lookupsGameTitleCallbackTemplatesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return a list of all game join schemas.
     * 
     * @return ApiResponse&lt;ResponseOutputModelListGameTitleCallbackTemplateModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListGameTitleCallbackTemplateModel> lookupsGameTitleCallbackTemplatesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lookupsGameTitleCallbackTemplatesCall(null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListGameTitleCallbackTemplateModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a list of all game join schemas. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookupsGameTitleCallbackTemplatesAsync(final ApiCallback<ResponseOutputModelListGameTitleCallbackTemplateModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookupsGameTitleCallbackTemplatesCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListGameTitleCallbackTemplateModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for lookupsGameTitleValidationMethodTypes */
    private com.squareup.okhttp.Call lookupsGameTitleValidationMethodTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/API/Lookups/GameTitleValidationMethodTypes".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return a list of all player validation types.
     * 
     * @return ResponseOutputModelListGameTitleValidationMethodTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListGameTitleValidationMethodTypeModel lookupsGameTitleValidationMethodTypes() throws ApiException {
        ApiResponse<ResponseOutputModelListGameTitleValidationMethodTypeModel> resp = lookupsGameTitleValidationMethodTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return a list of all player validation types.
     * 
     * @return ApiResponse&lt;ResponseOutputModelListGameTitleValidationMethodTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListGameTitleValidationMethodTypeModel> lookupsGameTitleValidationMethodTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lookupsGameTitleValidationMethodTypesCall(null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListGameTitleValidationMethodTypeModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a list of all player validation types. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookupsGameTitleValidationMethodTypesAsync(final ApiCallback<ResponseOutputModelListGameTitleValidationMethodTypeModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookupsGameTitleValidationMethodTypesCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListGameTitleValidationMethodTypeModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for lookupsGamingServerRegions */
    private com.squareup.okhttp.Call lookupsGamingServerRegionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/API/Lookups/GamingServerRegions".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return a list of all game server region classifications.
     * 
     * @return ResponseOutputModelListGamingServerRegionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListGamingServerRegionModel lookupsGamingServerRegions() throws ApiException {
        ApiResponse<ResponseOutputModelListGamingServerRegionModel> resp = lookupsGamingServerRegionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return a list of all game server region classifications.
     * 
     * @return ApiResponse&lt;ResponseOutputModelListGamingServerRegionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListGamingServerRegionModel> lookupsGamingServerRegionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lookupsGamingServerRegionsCall(null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListGamingServerRegionModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a list of all game server region classifications. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookupsGamingServerRegionsAsync(final ApiCallback<ResponseOutputModelListGamingServerRegionModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookupsGamingServerRegionsCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListGamingServerRegionModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for lookupsGetArenaRankList */
    private com.squareup.okhttp.Call lookupsGetArenaRankListCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/API/Lookups/RankList".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return a list of all Arena Ranking Levels
     * 
     * @return ResponseOutputModelListPlayerRankingLevel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListPlayerRankingLevel lookupsGetArenaRankList() throws ApiException {
        ApiResponse<ResponseOutputModelListPlayerRankingLevel> resp = lookupsGetArenaRankListWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return a list of all Arena Ranking Levels
     * 
     * @return ApiResponse&lt;ResponseOutputModelListPlayerRankingLevel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListPlayerRankingLevel> lookupsGetArenaRankListWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lookupsGetArenaRankListCall(null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListPlayerRankingLevel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a list of all Arena Ranking Levels (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookupsGetArenaRankListAsync(final ApiCallback<ResponseOutputModelListPlayerRankingLevel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookupsGetArenaRankListCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListPlayerRankingLevel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for lookupsGetMapVotingTypes */
    private com.squareup.okhttp.Call lookupsGetMapVotingTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/API/Lookups/MapVotingTypes".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return a list of all round rule map voting and veto types.
     * 
     * @return ResponseOutputModelListTournamentRoundRuleMapVotingStyleModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListTournamentRoundRuleMapVotingStyleModel lookupsGetMapVotingTypes() throws ApiException {
        ApiResponse<ResponseOutputModelListTournamentRoundRuleMapVotingStyleModel> resp = lookupsGetMapVotingTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return a list of all round rule map voting and veto types.
     * 
     * @return ApiResponse&lt;ResponseOutputModelListTournamentRoundRuleMapVotingStyleModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListTournamentRoundRuleMapVotingStyleModel> lookupsGetMapVotingTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lookupsGetMapVotingTypesCall(null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentRoundRuleMapVotingStyleModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a list of all round rule map voting and veto types. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookupsGetMapVotingTypesAsync(final ApiCallback<ResponseOutputModelListTournamentRoundRuleMapVotingStyleModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookupsGetMapVotingTypesCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentRoundRuleMapVotingStyleModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for lookupsGetRosterRoles */
    private com.squareup.okhttp.Call lookupsGetRosterRolesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/API/Lookups/RosterRoles".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return a list of all team roster roles
     * 
     * @return ResponseOutputModelListTeamRosterRoleModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListTeamRosterRoleModel lookupsGetRosterRoles() throws ApiException {
        ApiResponse<ResponseOutputModelListTeamRosterRoleModel> resp = lookupsGetRosterRolesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return a list of all team roster roles
     * 
     * @return ApiResponse&lt;ResponseOutputModelListTeamRosterRoleModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListTeamRosterRoleModel> lookupsGetRosterRolesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lookupsGetRosterRolesCall(null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTeamRosterRoleModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a list of all team roster roles (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookupsGetRosterRolesAsync(final ApiCallback<ResponseOutputModelListTeamRosterRoleModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookupsGetRosterRolesCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTeamRosterRoleModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for lookupsQualifierTieBreakerTypes */
    private com.squareup.okhttp.Call lookupsQualifierTieBreakerTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/API/Lookups/QualifierTieBreakerTypes".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return list of all tournament privacy types.
     * 
     * @return ResponseOutputModelListTournamentQualifierTieBreakerTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListTournamentQualifierTieBreakerTypeModel lookupsQualifierTieBreakerTypes() throws ApiException {
        ApiResponse<ResponseOutputModelListTournamentQualifierTieBreakerTypeModel> resp = lookupsQualifierTieBreakerTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return list of all tournament privacy types.
     * 
     * @return ApiResponse&lt;ResponseOutputModelListTournamentQualifierTieBreakerTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListTournamentQualifierTieBreakerTypeModel> lookupsQualifierTieBreakerTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lookupsQualifierTieBreakerTypesCall(null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentQualifierTieBreakerTypeModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return list of all tournament privacy types. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookupsQualifierTieBreakerTypesAsync(final ApiCallback<ResponseOutputModelListTournamentQualifierTieBreakerTypeModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookupsQualifierTieBreakerTypesCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentQualifierTieBreakerTypeModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for lookupsStreamingServices */
    private com.squareup.okhttp.Call lookupsStreamingServicesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/API/Lookups/StreamingServices".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return a list of all video streaming services.
     * 
     * @return ResponseOutputModelListStreamingServiceModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListStreamingServiceModel lookupsStreamingServices() throws ApiException {
        ApiResponse<ResponseOutputModelListStreamingServiceModel> resp = lookupsStreamingServicesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return a list of all video streaming services.
     * 
     * @return ApiResponse&lt;ResponseOutputModelListStreamingServiceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListStreamingServiceModel> lookupsStreamingServicesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lookupsStreamingServicesCall(null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListStreamingServiceModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a list of all video streaming services. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookupsStreamingServicesAsync(final ApiCallback<ResponseOutputModelListStreamingServiceModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookupsStreamingServicesCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListStreamingServiceModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for lookupsTournamentJoinTypes */
    private com.squareup.okhttp.Call lookupsTournamentJoinTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/API/Lookups/TournamentJoinTypes".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return list of all tournament privacy types.
     * 
     * @return ResponseOutputModelListTournamentJoinTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListTournamentJoinTypeModel lookupsTournamentJoinTypes() throws ApiException {
        ApiResponse<ResponseOutputModelListTournamentJoinTypeModel> resp = lookupsTournamentJoinTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return list of all tournament privacy types.
     * 
     * @return ApiResponse&lt;ResponseOutputModelListTournamentJoinTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListTournamentJoinTypeModel> lookupsTournamentJoinTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lookupsTournamentJoinTypesCall(null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentJoinTypeModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return list of all tournament privacy types. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookupsTournamentJoinTypesAsync(final ApiCallback<ResponseOutputModelListTournamentJoinTypeModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookupsTournamentJoinTypesCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentJoinTypeModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for lookupsTournamentPairingTypes */
    private com.squareup.okhttp.Call lookupsTournamentPairingTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/API/Lookups/TournamentPairingTypes".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return a list of all tournament pairing types
     * 
     * @return ResponseOutputModelListTournamentPairingTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListTournamentPairingTypeModel lookupsTournamentPairingTypes() throws ApiException {
        ApiResponse<ResponseOutputModelListTournamentPairingTypeModel> resp = lookupsTournamentPairingTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return a list of all tournament pairing types
     * 
     * @return ApiResponse&lt;ResponseOutputModelListTournamentPairingTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListTournamentPairingTypeModel> lookupsTournamentPairingTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lookupsTournamentPairingTypesCall(null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentPairingTypeModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a list of all tournament pairing types (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookupsTournamentPairingTypesAsync(final ApiCallback<ResponseOutputModelListTournamentPairingTypeModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookupsTournamentPairingTypesCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentPairingTypeModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for lookupsTournamentPrizeFundingTypes */
    private com.squareup.okhttp.Call lookupsTournamentPrizeFundingTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/API/Lookups/TournamentPrizeFundingTypes".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return a list of all tournament funding types.
     * 
     * @return ResponseOutputModelListTournamentPrizeFundingTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListTournamentPrizeFundingTypeModel lookupsTournamentPrizeFundingTypes() throws ApiException {
        ApiResponse<ResponseOutputModelListTournamentPrizeFundingTypeModel> resp = lookupsTournamentPrizeFundingTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return a list of all tournament funding types.
     * 
     * @return ApiResponse&lt;ResponseOutputModelListTournamentPrizeFundingTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListTournamentPrizeFundingTypeModel> lookupsTournamentPrizeFundingTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lookupsTournamentPrizeFundingTypesCall(null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentPrizeFundingTypeModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a list of all tournament funding types. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookupsTournamentPrizeFundingTypesAsync(final ApiCallback<ResponseOutputModelListTournamentPrizeFundingTypeModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookupsTournamentPrizeFundingTypesCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentPrizeFundingTypeModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for lookupsTournamentSeedingTypes */
    private com.squareup.okhttp.Call lookupsTournamentSeedingTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/API/Lookups/TournamentSeedingTypes".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return a list of all bracket seeding methods.
     * 
     * @return ResponseOutputModelListTournamentSeedingTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListTournamentSeedingTypeModel lookupsTournamentSeedingTypes() throws ApiException {
        ApiResponse<ResponseOutputModelListTournamentSeedingTypeModel> resp = lookupsTournamentSeedingTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return a list of all bracket seeding methods.
     * 
     * @return ApiResponse&lt;ResponseOutputModelListTournamentSeedingTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListTournamentSeedingTypeModel> lookupsTournamentSeedingTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lookupsTournamentSeedingTypesCall(null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentSeedingTypeModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a list of all bracket seeding methods. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookupsTournamentSeedingTypesAsync(final ApiCallback<ResponseOutputModelListTournamentSeedingTypeModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookupsTournamentSeedingTypesCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentSeedingTypeModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for lookupsTournamentTypes */
    private com.squareup.okhttp.Call lookupsTournamentTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/API/Lookups/TournamentTypes".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Return a list of all tournament lifecycle types.
     * 
     * @return ResponseOutputModelListTournamentTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOutputModelListTournamentTypeModel lookupsTournamentTypes() throws ApiException {
        ApiResponse<ResponseOutputModelListTournamentTypeModel> resp = lookupsTournamentTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return a list of all tournament lifecycle types.
     * 
     * @return ApiResponse&lt;ResponseOutputModelListTournamentTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOutputModelListTournamentTypeModel> lookupsTournamentTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lookupsTournamentTypesCall(null, null);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentTypeModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a list of all tournament lifecycle types. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookupsTournamentTypesAsync(final ApiCallback<ResponseOutputModelListTournamentTypeModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookupsTournamentTypesCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOutputModelListTournamentTypeModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
