/*
 * Polling API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.joda.time.DateTime;

/**
 * Represents a Tournament Match within the platform.
 */
@ApiModel(description = "Represents a Tournament Match within the platform.")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-12-02T00:05:30.138Z")
public class TournamentMatchMessageModel {
  @SerializedName("MessageId")
  private Long messageId = null;

  @SerializedName("TournamentMatchId")
  private Long tournamentMatchId = null;

  @SerializedName("MessageDirection")
  private Integer messageDirection = null;

  @SerializedName("Message")
  private String message = null;

  @SerializedName("PendingServerProcessing")
  private Boolean pendingServerProcessing = null;

  @SerializedName("MessageDateTime")
  private DateTime messageDateTime = null;

  public TournamentMatchMessageModel messageId(Long messageId) {
    this.messageId = messageId;
    return this;
  }

   /**
   * Internal ID representing this unique message object.
   * @return messageId
  **/
  @ApiModelProperty(example = "null", value = "Internal ID representing this unique message object.")
  public Long getMessageId() {
    return messageId;
  }

  public void setMessageId(Long messageId) {
    this.messageId = messageId;
  }

  public TournamentMatchMessageModel tournamentMatchId(Long tournamentMatchId) {
    this.tournamentMatchId = tournamentMatchId;
    return this;
  }

   /**
   * Internal platform ID representing this unique tournament match.
   * @return tournamentMatchId
  **/
  @ApiModelProperty(example = "null", value = "Internal platform ID representing this unique tournament match.")
  public Long getTournamentMatchId() {
    return tournamentMatchId;
  }

  public void setTournamentMatchId(Long tournamentMatchId) {
    this.tournamentMatchId = tournamentMatchId;
  }

  public TournamentMatchMessageModel messageDirection(Integer messageDirection) {
    this.messageDirection = messageDirection;
    return this;
  }

   /**
   * Represents the direction of the message.  (1) from the user-interface, (2) from the game server.
   * @return messageDirection
  **/
  @ApiModelProperty(example = "null", value = "Represents the direction of the message.  (1) from the user-interface, (2) from the game server.")
  public Integer getMessageDirection() {
    return messageDirection;
  }

  public void setMessageDirection(Integer messageDirection) {
    this.messageDirection = messageDirection;
  }

  public TournamentMatchMessageModel message(String message) {
    this.message = message;
    return this;
  }

   /**
   * String message that was typed to be delivered.
   * @return message
  **/
  @ApiModelProperty(example = "null", value = "String message that was typed to be delivered.")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public TournamentMatchMessageModel pendingServerProcessing(Boolean pendingServerProcessing) {
    this.pendingServerProcessing = pendingServerProcessing;
    return this;
  }

   /**
   * Flag denoting whether or not this item has been proceed by the game server yet.
   * @return pendingServerProcessing
  **/
  @ApiModelProperty(example = "null", value = "Flag denoting whether or not this item has been proceed by the game server yet.")
  public Boolean getPendingServerProcessing() {
    return pendingServerProcessing;
  }

  public void setPendingServerProcessing(Boolean pendingServerProcessing) {
    this.pendingServerProcessing = pendingServerProcessing;
  }

  public TournamentMatchMessageModel messageDateTime(DateTime messageDateTime) {
    this.messageDateTime = messageDateTime;
    return this;
  }

   /**
   * Universal timestamp representing the creation of this message object.
   * @return messageDateTime
  **/
  @ApiModelProperty(example = "null", value = "Universal timestamp representing the creation of this message object.")
  public DateTime getMessageDateTime() {
    return messageDateTime;
  }

  public void setMessageDateTime(DateTime messageDateTime) {
    this.messageDateTime = messageDateTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TournamentMatchMessageModel tournamentMatchMessageModel = (TournamentMatchMessageModel) o;
    return Objects.equals(this.messageId, tournamentMatchMessageModel.messageId) &&
        Objects.equals(this.tournamentMatchId, tournamentMatchMessageModel.tournamentMatchId) &&
        Objects.equals(this.messageDirection, tournamentMatchMessageModel.messageDirection) &&
        Objects.equals(this.message, tournamentMatchMessageModel.message) &&
        Objects.equals(this.pendingServerProcessing, tournamentMatchMessageModel.pendingServerProcessing) &&
        Objects.equals(this.messageDateTime, tournamentMatchMessageModel.messageDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageId, tournamentMatchId, messageDirection, message, pendingServerProcessing, messageDateTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TournamentMatchMessageModel {\n");
    
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    tournamentMatchId: ").append(toIndentedString(tournamentMatchId)).append("\n");
    sb.append("    messageDirection: ").append(toIndentedString(messageDirection)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    pendingServerProcessing: ").append(toIndentedString(pendingServerProcessing)).append("\n");
    sb.append("    messageDateTime: ").append(toIndentedString(messageDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

