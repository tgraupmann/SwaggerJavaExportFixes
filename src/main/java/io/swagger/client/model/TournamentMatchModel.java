/*
 * Polling API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.EntityProfileModel;
import io.swagger.client.model.StreamingServiceModel;
import io.swagger.client.model.TournamentMatchActionLogModel;
import io.swagger.client.model.TournamentMatchAssistanceModel;
import io.swagger.client.model.TournamentMatchDisputeModel;
import io.swagger.client.model.TournamentMatchMapVotingModel;
import io.swagger.client.model.TournamentMatchMapsPlayedModel;
import io.swagger.client.model.TournamentMatchParticipantModel;
import io.swagger.client.model.TournamentMatchPlaybackModel;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;

/**
 * TournamentMatchModel
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-12-02T00:05:30.138Z")
public class TournamentMatchModel {
  @SerializedName("TournamentMatchStateId")
  private Integer tournamentMatchStateId = null;

  @SerializedName("TournamentMatchExtendedStateId")
  private Integer tournamentMatchExtendedStateId = null;

  @SerializedName("RequireManualScoreReport")
  private Boolean requireManualScoreReport = null;

  @SerializedName("TournamentMatchId")
  private Long tournamentMatchId = null;

  @SerializedName("TournamentId")
  private Long tournamentId = null;

  @SerializedName("GameTitleId")
  private Integer gameTitleId = null;

  @SerializedName("IsTeamTournament")
  private Boolean isTeamTournament = null;

  @SerializedName("MatchIsAwaitingMapVote")
  private Boolean matchIsAwaitingMapVote = null;

  @SerializedName("MatchIsLive")
  private Boolean matchIsLive = null;

  @SerializedName("MatchLiveDateTime")
  private DateTime matchLiveDateTime = null;

  @SerializedName("MatchIsComplete")
  private Boolean matchIsComplete = null;

  @SerializedName("MatchCompleteDateTime")
  private DateTime matchCompleteDateTime = null;

  @SerializedName("MatchIsFinalized")
  private Boolean matchIsFinalized = null;

  @SerializedName("MatchFinalizedDateTime")
  private DateTime matchFinalizedDateTime = null;

  @SerializedName("EnableMatchLobby")
  private Boolean enableMatchLobby = null;

  @SerializedName("AllowCheckin")
  private Boolean allowCheckin = null;

  @SerializedName("AllowCheckinDateTime")
  private DateTime allowCheckinDateTime = null;

  @SerializedName("ScheduledStartDateTime")
  private DateTime scheduledStartDateTime = null;

  @SerializedName("ScheduledForfeitDateTime")
  private DateTime scheduledForfeitDateTime = null;

  @SerializedName("EntityOwnerId")
  private Long entityOwnerId = null;

  @SerializedName("EntityOwnerProfile")
  private EntityProfileModel entityOwnerProfile = null;

  @SerializedName("EntityParticipantA")
  private TournamentMatchParticipantModel entityParticipantA = null;

  @SerializedName("EntityParticipantB")
  private TournamentMatchParticipantModel entityParticipantB = null;

  @SerializedName("RoundNumber")
  private Integer roundNumber = null;

  @SerializedName("RoundLevelTypeId")
  private Integer roundLevelTypeId = null;

  @SerializedName("MatchNumber")
  private Integer matchNumber = null;

  @SerializedName("NumberOfMaps")
  private Integer numberOfMaps = null;

  @SerializedName("MapNumber")
  private Integer mapNumber = null;

  @SerializedName("CurrentGameTitleMapNameId")
  private Integer currentGameTitleMapNameId = null;

  @SerializedName("GameTitleMapFileName")
  private String gameTitleMapFileName = null;

  @SerializedName("GameTitleMapProperName")
  private String gameTitleMapProperName = null;

  @SerializedName("GamingServerRegionId")
  private Integer gamingServerRegionId = null;

  @SerializedName("GamingServerRegionName")
  private String gamingServerRegionName = null;

  @SerializedName("IsBracket")
  private Boolean isBracket = null;

  @SerializedName("AllowRescheduling")
  private Boolean allowRescheduling = null;

  @SerializedName("WillBroadcast")
  private Boolean willBroadcast = null;

  @SerializedName("BroadcastUrl")
  private String broadcastUrl = null;

  @SerializedName("AutomaticGoLiveOnSchedule")
  private Boolean automaticGoLiveOnSchedule = null;

  @SerializedName("MinutesAfterStartToForfeit")
  private Integer minutesAfterStartToForfeit = null;

  @SerializedName("MinutesBeforeStartToAllowCheckin")
  private Integer minutesBeforeStartToAllowCheckin = null;

  @SerializedName("ServerSendPlayerSummaryStatistics")
  private Boolean serverSendPlayerSummaryStatistics = null;

  @SerializedName("GamingServerId")
  private Integer gamingServerId = null;

  @SerializedName("EntityPlayerControllerId")
  private Long entityPlayerControllerId = null;

  @SerializedName("AllTeamAPlayersReady")
  private Boolean allTeamAPlayersReady = null;

  @SerializedName("TeamAIsReady")
  private Boolean teamAIsReady = null;

  @SerializedName("AllTeamBPlayersReady")
  private Boolean allTeamBPlayersReady = null;

  @SerializedName("TeamBIsReady")
  private Boolean teamBIsReady = null;

  @SerializedName("ScoreManuallyReportedDateTime")
  private DateTime scoreManuallyReportedDateTime = null;

  @SerializedName("ScoreManuallyReported")
  private Boolean scoreManuallyReported = null;

  @SerializedName("ScoreManuallyReportedByPlayerId")
  private Long scoreManuallyReportedByPlayerId = null;

  @SerializedName("ScoreManuallyReportedByTeamA")
  private Boolean scoreManuallyReportedByTeamA = null;

  @SerializedName("ScoreManuallyApplyToEntireRound")
  private Boolean scoreManuallyApplyToEntireRound = null;

  @SerializedName("MapsPlayed")
  private List<TournamentMatchMapsPlayedModel> mapsPlayed = new ArrayList<TournamentMatchMapsPlayedModel>();

  @SerializedName("Dispute")
  private TournamentMatchDisputeModel dispute = null;

  @SerializedName("NewServerRequested")
  private Boolean newServerRequested = null;

  @SerializedName("NewServerRequestedEntityId")
  private Long newServerRequestedEntityId = null;

  @SerializedName("NewServerRequestedByTeamA")
  private Boolean newServerRequestedByTeamA = null;

  @SerializedName("NewServerRequestedCount")
  private Integer newServerRequestedCount = null;

  @SerializedName("NeedsAssistance")
  private Boolean needsAssistance = null;

  @SerializedName("AllowedSpectators")
  private String allowedSpectators = null;

  @SerializedName("StreamingServiceId")
  private Integer streamingServiceId = null;

  @SerializedName("ManualMode")
  private Boolean manualMode = null;

  @SerializedName("ManualServerConnectionInfo")
  private String manualServerConnectionInfo = null;

  @SerializedName("StreamingService")
  private StreamingServiceModel streamingService = null;

  @SerializedName("AssistanceRequests")
  private List<TournamentMatchAssistanceModel> assistanceRequests = new ArrayList<TournamentMatchAssistanceModel>();

  @SerializedName("LastUpdatedDateTime")
  private DateTime lastUpdatedDateTime = null;

  @SerializedName("ServerConfigurationFileName")
  private String serverConfigurationFileName = null;

  @SerializedName("MatchConnectionInstructions")
  private String matchConnectionInstructions = null;

  @SerializedName("MatchAdministratorId")
  private Long matchAdministratorId = null;

  @SerializedName("ActionLog")
  private List<TournamentMatchActionLogModel> actionLog = new ArrayList<TournamentMatchActionLogModel>();

  @SerializedName("Playback")
  private List<TournamentMatchPlaybackModel> playback = new ArrayList<TournamentMatchPlaybackModel>();

  @SerializedName("QualifierGroupNumber")
  private Integer qualifierGroupNumber = null;

  @SerializedName("IsQualifier")
  private Boolean isQualifier = null;

  @SerializedName("HasTieBreaker")
  private Boolean hasTieBreaker = null;

  @SerializedName("TieBreakerCount")
  private Integer tieBreakerCount = null;

  @SerializedName("MapVotingResult")
  private TournamentMatchMapVotingModel mapVotingResult = null;

   /**
   * Get tournamentMatchStateId
   * @return tournamentMatchStateId
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getTournamentMatchStateId() {
    return tournamentMatchStateId;
  }

   /**
   * Get tournamentMatchExtendedStateId
   * @return tournamentMatchExtendedStateId
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getTournamentMatchExtendedStateId() {
    return tournamentMatchExtendedStateId;
  }

   /**
   * Get requireManualScoreReport
   * @return requireManualScoreReport
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getRequireManualScoreReport() {
    return requireManualScoreReport;
  }

  public TournamentMatchModel tournamentMatchId(Long tournamentMatchId) {
    this.tournamentMatchId = tournamentMatchId;
    return this;
  }

   /**
   * Get tournamentMatchId
   * @return tournamentMatchId
  **/
  @ApiModelProperty(example = "null", value = "")
  public Long getTournamentMatchId() {
    return tournamentMatchId;
  }

  public void setTournamentMatchId(Long tournamentMatchId) {
    this.tournamentMatchId = tournamentMatchId;
  }

  public TournamentMatchModel tournamentId(Long tournamentId) {
    this.tournamentId = tournamentId;
    return this;
  }

   /**
   * Get tournamentId
   * @return tournamentId
  **/
  @ApiModelProperty(example = "null", value = "")
  public Long getTournamentId() {
    return tournamentId;
  }

  public void setTournamentId(Long tournamentId) {
    this.tournamentId = tournamentId;
  }

  public TournamentMatchModel gameTitleId(Integer gameTitleId) {
    this.gameTitleId = gameTitleId;
    return this;
  }

   /**
   * Get gameTitleId
   * @return gameTitleId
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getGameTitleId() {
    return gameTitleId;
  }

  public void setGameTitleId(Integer gameTitleId) {
    this.gameTitleId = gameTitleId;
  }

  public TournamentMatchModel isTeamTournament(Boolean isTeamTournament) {
    this.isTeamTournament = isTeamTournament;
    return this;
  }

   /**
   * Get isTeamTournament
   * @return isTeamTournament
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getIsTeamTournament() {
    return isTeamTournament;
  }

  public void setIsTeamTournament(Boolean isTeamTournament) {
    this.isTeamTournament = isTeamTournament;
  }

  public TournamentMatchModel matchIsAwaitingMapVote(Boolean matchIsAwaitingMapVote) {
    this.matchIsAwaitingMapVote = matchIsAwaitingMapVote;
    return this;
  }

   /**
   * Get matchIsAwaitingMapVote
   * @return matchIsAwaitingMapVote
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getMatchIsAwaitingMapVote() {
    return matchIsAwaitingMapVote;
  }

  public void setMatchIsAwaitingMapVote(Boolean matchIsAwaitingMapVote) {
    this.matchIsAwaitingMapVote = matchIsAwaitingMapVote;
  }

  public TournamentMatchModel matchIsLive(Boolean matchIsLive) {
    this.matchIsLive = matchIsLive;
    return this;
  }

   /**
   * Get matchIsLive
   * @return matchIsLive
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getMatchIsLive() {
    return matchIsLive;
  }

  public void setMatchIsLive(Boolean matchIsLive) {
    this.matchIsLive = matchIsLive;
  }

  public TournamentMatchModel matchLiveDateTime(DateTime matchLiveDateTime) {
    this.matchLiveDateTime = matchLiveDateTime;
    return this;
  }

   /**
   * Get matchLiveDateTime
   * @return matchLiveDateTime
  **/
  @ApiModelProperty(example = "null", value = "")
  public DateTime getMatchLiveDateTime() {
    return matchLiveDateTime;
  }

  public void setMatchLiveDateTime(DateTime matchLiveDateTime) {
    this.matchLiveDateTime = matchLiveDateTime;
  }

  public TournamentMatchModel matchIsComplete(Boolean matchIsComplete) {
    this.matchIsComplete = matchIsComplete;
    return this;
  }

   /**
   * Get matchIsComplete
   * @return matchIsComplete
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getMatchIsComplete() {
    return matchIsComplete;
  }

  public void setMatchIsComplete(Boolean matchIsComplete) {
    this.matchIsComplete = matchIsComplete;
  }

  public TournamentMatchModel matchCompleteDateTime(DateTime matchCompleteDateTime) {
    this.matchCompleteDateTime = matchCompleteDateTime;
    return this;
  }

   /**
   * Get matchCompleteDateTime
   * @return matchCompleteDateTime
  **/
  @ApiModelProperty(example = "null", value = "")
  public DateTime getMatchCompleteDateTime() {
    return matchCompleteDateTime;
  }

  public void setMatchCompleteDateTime(DateTime matchCompleteDateTime) {
    this.matchCompleteDateTime = matchCompleteDateTime;
  }

  public TournamentMatchModel matchIsFinalized(Boolean matchIsFinalized) {
    this.matchIsFinalized = matchIsFinalized;
    return this;
  }

   /**
   * Get matchIsFinalized
   * @return matchIsFinalized
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getMatchIsFinalized() {
    return matchIsFinalized;
  }

  public void setMatchIsFinalized(Boolean matchIsFinalized) {
    this.matchIsFinalized = matchIsFinalized;
  }

  public TournamentMatchModel matchFinalizedDateTime(DateTime matchFinalizedDateTime) {
    this.matchFinalizedDateTime = matchFinalizedDateTime;
    return this;
  }

   /**
   * Get matchFinalizedDateTime
   * @return matchFinalizedDateTime
  **/
  @ApiModelProperty(example = "null", value = "")
  public DateTime getMatchFinalizedDateTime() {
    return matchFinalizedDateTime;
  }

  public void setMatchFinalizedDateTime(DateTime matchFinalizedDateTime) {
    this.matchFinalizedDateTime = matchFinalizedDateTime;
  }

  public TournamentMatchModel enableMatchLobby(Boolean enableMatchLobby) {
    this.enableMatchLobby = enableMatchLobby;
    return this;
  }

   /**
   * Get enableMatchLobby
   * @return enableMatchLobby
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getEnableMatchLobby() {
    return enableMatchLobby;
  }

  public void setEnableMatchLobby(Boolean enableMatchLobby) {
    this.enableMatchLobby = enableMatchLobby;
  }

   /**
   * Get allowCheckin
   * @return allowCheckin
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getAllowCheckin() {
    return allowCheckin;
  }

  public TournamentMatchModel allowCheckinDateTime(DateTime allowCheckinDateTime) {
    this.allowCheckinDateTime = allowCheckinDateTime;
    return this;
  }

   /**
   * Get allowCheckinDateTime
   * @return allowCheckinDateTime
  **/
  @ApiModelProperty(example = "null", value = "")
  public DateTime getAllowCheckinDateTime() {
    return allowCheckinDateTime;
  }

  public void setAllowCheckinDateTime(DateTime allowCheckinDateTime) {
    this.allowCheckinDateTime = allowCheckinDateTime;
  }

  public TournamentMatchModel scheduledStartDateTime(DateTime scheduledStartDateTime) {
    this.scheduledStartDateTime = scheduledStartDateTime;
    return this;
  }

   /**
   * Get scheduledStartDateTime
   * @return scheduledStartDateTime
  **/
  @ApiModelProperty(example = "null", value = "")
  public DateTime getScheduledStartDateTime() {
    return scheduledStartDateTime;
  }

  public void setScheduledStartDateTime(DateTime scheduledStartDateTime) {
    this.scheduledStartDateTime = scheduledStartDateTime;
  }

  public TournamentMatchModel scheduledForfeitDateTime(DateTime scheduledForfeitDateTime) {
    this.scheduledForfeitDateTime = scheduledForfeitDateTime;
    return this;
  }

   /**
   * Get scheduledForfeitDateTime
   * @return scheduledForfeitDateTime
  **/
  @ApiModelProperty(example = "null", value = "")
  public DateTime getScheduledForfeitDateTime() {
    return scheduledForfeitDateTime;
  }

  public void setScheduledForfeitDateTime(DateTime scheduledForfeitDateTime) {
    this.scheduledForfeitDateTime = scheduledForfeitDateTime;
  }

  public TournamentMatchModel entityOwnerId(Long entityOwnerId) {
    this.entityOwnerId = entityOwnerId;
    return this;
  }

   /**
   * Get entityOwnerId
   * @return entityOwnerId
  **/
  @ApiModelProperty(example = "null", value = "")
  public Long getEntityOwnerId() {
    return entityOwnerId;
  }

  public void setEntityOwnerId(Long entityOwnerId) {
    this.entityOwnerId = entityOwnerId;
  }

  public TournamentMatchModel entityOwnerProfile(EntityProfileModel entityOwnerProfile) {
    this.entityOwnerProfile = entityOwnerProfile;
    return this;
  }

   /**
   * Get entityOwnerProfile
   * @return entityOwnerProfile
  **/
  @ApiModelProperty(example = "null", value = "")
  public EntityProfileModel getEntityOwnerProfile() {
    return entityOwnerProfile;
  }

  public void setEntityOwnerProfile(EntityProfileModel entityOwnerProfile) {
    this.entityOwnerProfile = entityOwnerProfile;
  }

  public TournamentMatchModel entityParticipantA(TournamentMatchParticipantModel entityParticipantA) {
    this.entityParticipantA = entityParticipantA;
    return this;
  }

   /**
   * Get entityParticipantA
   * @return entityParticipantA
  **/
  @ApiModelProperty(example = "null", value = "")
  public TournamentMatchParticipantModel getEntityParticipantA() {
    return entityParticipantA;
  }

  public void setEntityParticipantA(TournamentMatchParticipantModel entityParticipantA) {
    this.entityParticipantA = entityParticipantA;
  }

  public TournamentMatchModel entityParticipantB(TournamentMatchParticipantModel entityParticipantB) {
    this.entityParticipantB = entityParticipantB;
    return this;
  }

   /**
   * Get entityParticipantB
   * @return entityParticipantB
  **/
  @ApiModelProperty(example = "null", value = "")
  public TournamentMatchParticipantModel getEntityParticipantB() {
    return entityParticipantB;
  }

  public void setEntityParticipantB(TournamentMatchParticipantModel entityParticipantB) {
    this.entityParticipantB = entityParticipantB;
  }

  public TournamentMatchModel roundNumber(Integer roundNumber) {
    this.roundNumber = roundNumber;
    return this;
  }

   /**
   * Get roundNumber
   * @return roundNumber
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getRoundNumber() {
    return roundNumber;
  }

  public void setRoundNumber(Integer roundNumber) {
    this.roundNumber = roundNumber;
  }

  public TournamentMatchModel roundLevelTypeId(Integer roundLevelTypeId) {
    this.roundLevelTypeId = roundLevelTypeId;
    return this;
  }

   /**
   * Get roundLevelTypeId
   * @return roundLevelTypeId
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getRoundLevelTypeId() {
    return roundLevelTypeId;
  }

  public void setRoundLevelTypeId(Integer roundLevelTypeId) {
    this.roundLevelTypeId = roundLevelTypeId;
  }

  public TournamentMatchModel matchNumber(Integer matchNumber) {
    this.matchNumber = matchNumber;
    return this;
  }

   /**
   * Get matchNumber
   * @return matchNumber
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getMatchNumber() {
    return matchNumber;
  }

  public void setMatchNumber(Integer matchNumber) {
    this.matchNumber = matchNumber;
  }

  public TournamentMatchModel numberOfMaps(Integer numberOfMaps) {
    this.numberOfMaps = numberOfMaps;
    return this;
  }

   /**
   * Get numberOfMaps
   * @return numberOfMaps
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getNumberOfMaps() {
    return numberOfMaps;
  }

  public void setNumberOfMaps(Integer numberOfMaps) {
    this.numberOfMaps = numberOfMaps;
  }

  public TournamentMatchModel mapNumber(Integer mapNumber) {
    this.mapNumber = mapNumber;
    return this;
  }

   /**
   * Get mapNumber
   * @return mapNumber
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getMapNumber() {
    return mapNumber;
  }

  public void setMapNumber(Integer mapNumber) {
    this.mapNumber = mapNumber;
  }

  public TournamentMatchModel currentGameTitleMapNameId(Integer currentGameTitleMapNameId) {
    this.currentGameTitleMapNameId = currentGameTitleMapNameId;
    return this;
  }

   /**
   * Get currentGameTitleMapNameId
   * @return currentGameTitleMapNameId
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getCurrentGameTitleMapNameId() {
    return currentGameTitleMapNameId;
  }

  public void setCurrentGameTitleMapNameId(Integer currentGameTitleMapNameId) {
    this.currentGameTitleMapNameId = currentGameTitleMapNameId;
  }

  public TournamentMatchModel gameTitleMapFileName(String gameTitleMapFileName) {
    this.gameTitleMapFileName = gameTitleMapFileName;
    return this;
  }

   /**
   * Get gameTitleMapFileName
   * @return gameTitleMapFileName
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getGameTitleMapFileName() {
    return gameTitleMapFileName;
  }

  public void setGameTitleMapFileName(String gameTitleMapFileName) {
    this.gameTitleMapFileName = gameTitleMapFileName;
  }

  public TournamentMatchModel gameTitleMapProperName(String gameTitleMapProperName) {
    this.gameTitleMapProperName = gameTitleMapProperName;
    return this;
  }

   /**
   * Get gameTitleMapProperName
   * @return gameTitleMapProperName
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getGameTitleMapProperName() {
    return gameTitleMapProperName;
  }

  public void setGameTitleMapProperName(String gameTitleMapProperName) {
    this.gameTitleMapProperName = gameTitleMapProperName;
  }

  public TournamentMatchModel gamingServerRegionId(Integer gamingServerRegionId) {
    this.gamingServerRegionId = gamingServerRegionId;
    return this;
  }

   /**
   * Get gamingServerRegionId
   * @return gamingServerRegionId
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getGamingServerRegionId() {
    return gamingServerRegionId;
  }

  public void setGamingServerRegionId(Integer gamingServerRegionId) {
    this.gamingServerRegionId = gamingServerRegionId;
  }

  public TournamentMatchModel gamingServerRegionName(String gamingServerRegionName) {
    this.gamingServerRegionName = gamingServerRegionName;
    return this;
  }

   /**
   * Get gamingServerRegionName
   * @return gamingServerRegionName
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getGamingServerRegionName() {
    return gamingServerRegionName;
  }

  public void setGamingServerRegionName(String gamingServerRegionName) {
    this.gamingServerRegionName = gamingServerRegionName;
  }

  public TournamentMatchModel isBracket(Boolean isBracket) {
    this.isBracket = isBracket;
    return this;
  }

   /**
   * Get isBracket
   * @return isBracket
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getIsBracket() {
    return isBracket;
  }

  public void setIsBracket(Boolean isBracket) {
    this.isBracket = isBracket;
  }

  public TournamentMatchModel allowRescheduling(Boolean allowRescheduling) {
    this.allowRescheduling = allowRescheduling;
    return this;
  }

   /**
   * Get allowRescheduling
   * @return allowRescheduling
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getAllowRescheduling() {
    return allowRescheduling;
  }

  public void setAllowRescheduling(Boolean allowRescheduling) {
    this.allowRescheduling = allowRescheduling;
  }

  public TournamentMatchModel willBroadcast(Boolean willBroadcast) {
    this.willBroadcast = willBroadcast;
    return this;
  }

   /**
   * Get willBroadcast
   * @return willBroadcast
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getWillBroadcast() {
    return willBroadcast;
  }

  public void setWillBroadcast(Boolean willBroadcast) {
    this.willBroadcast = willBroadcast;
  }

  public TournamentMatchModel broadcastUrl(String broadcastUrl) {
    this.broadcastUrl = broadcastUrl;
    return this;
  }

   /**
   * Get broadcastUrl
   * @return broadcastUrl
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getBroadcastUrl() {
    return broadcastUrl;
  }

  public void setBroadcastUrl(String broadcastUrl) {
    this.broadcastUrl = broadcastUrl;
  }

  public TournamentMatchModel automaticGoLiveOnSchedule(Boolean automaticGoLiveOnSchedule) {
    this.automaticGoLiveOnSchedule = automaticGoLiveOnSchedule;
    return this;
  }

   /**
   * Get automaticGoLiveOnSchedule
   * @return automaticGoLiveOnSchedule
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getAutomaticGoLiveOnSchedule() {
    return automaticGoLiveOnSchedule;
  }

  public void setAutomaticGoLiveOnSchedule(Boolean automaticGoLiveOnSchedule) {
    this.automaticGoLiveOnSchedule = automaticGoLiveOnSchedule;
  }

  public TournamentMatchModel minutesAfterStartToForfeit(Integer minutesAfterStartToForfeit) {
    this.minutesAfterStartToForfeit = minutesAfterStartToForfeit;
    return this;
  }

   /**
   * Get minutesAfterStartToForfeit
   * @return minutesAfterStartToForfeit
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getMinutesAfterStartToForfeit() {
    return minutesAfterStartToForfeit;
  }

  public void setMinutesAfterStartToForfeit(Integer minutesAfterStartToForfeit) {
    this.minutesAfterStartToForfeit = minutesAfterStartToForfeit;
  }

  public TournamentMatchModel minutesBeforeStartToAllowCheckin(Integer minutesBeforeStartToAllowCheckin) {
    this.minutesBeforeStartToAllowCheckin = minutesBeforeStartToAllowCheckin;
    return this;
  }

   /**
   * Get minutesBeforeStartToAllowCheckin
   * @return minutesBeforeStartToAllowCheckin
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getMinutesBeforeStartToAllowCheckin() {
    return minutesBeforeStartToAllowCheckin;
  }

  public void setMinutesBeforeStartToAllowCheckin(Integer minutesBeforeStartToAllowCheckin) {
    this.minutesBeforeStartToAllowCheckin = minutesBeforeStartToAllowCheckin;
  }

  public TournamentMatchModel serverSendPlayerSummaryStatistics(Boolean serverSendPlayerSummaryStatistics) {
    this.serverSendPlayerSummaryStatistics = serverSendPlayerSummaryStatistics;
    return this;
  }

   /**
   * Get serverSendPlayerSummaryStatistics
   * @return serverSendPlayerSummaryStatistics
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getServerSendPlayerSummaryStatistics() {
    return serverSendPlayerSummaryStatistics;
  }

  public void setServerSendPlayerSummaryStatistics(Boolean serverSendPlayerSummaryStatistics) {
    this.serverSendPlayerSummaryStatistics = serverSendPlayerSummaryStatistics;
  }

  public TournamentMatchModel gamingServerId(Integer gamingServerId) {
    this.gamingServerId = gamingServerId;
    return this;
  }

   /**
   * Get gamingServerId
   * @return gamingServerId
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getGamingServerId() {
    return gamingServerId;
  }

  public void setGamingServerId(Integer gamingServerId) {
    this.gamingServerId = gamingServerId;
  }

  public TournamentMatchModel entityPlayerControllerId(Long entityPlayerControllerId) {
    this.entityPlayerControllerId = entityPlayerControllerId;
    return this;
  }

   /**
   * Get entityPlayerControllerId
   * @return entityPlayerControllerId
  **/
  @ApiModelProperty(example = "null", value = "")
  public Long getEntityPlayerControllerId() {
    return entityPlayerControllerId;
  }

  public void setEntityPlayerControllerId(Long entityPlayerControllerId) {
    this.entityPlayerControllerId = entityPlayerControllerId;
  }

  public TournamentMatchModel allTeamAPlayersReady(Boolean allTeamAPlayersReady) {
    this.allTeamAPlayersReady = allTeamAPlayersReady;
    return this;
  }

   /**
   * Get allTeamAPlayersReady
   * @return allTeamAPlayersReady
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getAllTeamAPlayersReady() {
    return allTeamAPlayersReady;
  }

  public void setAllTeamAPlayersReady(Boolean allTeamAPlayersReady) {
    this.allTeamAPlayersReady = allTeamAPlayersReady;
  }

  public TournamentMatchModel teamAIsReady(Boolean teamAIsReady) {
    this.teamAIsReady = teamAIsReady;
    return this;
  }

   /**
   * Get teamAIsReady
   * @return teamAIsReady
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getTeamAIsReady() {
    return teamAIsReady;
  }

  public void setTeamAIsReady(Boolean teamAIsReady) {
    this.teamAIsReady = teamAIsReady;
  }

  public TournamentMatchModel allTeamBPlayersReady(Boolean allTeamBPlayersReady) {
    this.allTeamBPlayersReady = allTeamBPlayersReady;
    return this;
  }

   /**
   * Get allTeamBPlayersReady
   * @return allTeamBPlayersReady
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getAllTeamBPlayersReady() {
    return allTeamBPlayersReady;
  }

  public void setAllTeamBPlayersReady(Boolean allTeamBPlayersReady) {
    this.allTeamBPlayersReady = allTeamBPlayersReady;
  }

  public TournamentMatchModel teamBIsReady(Boolean teamBIsReady) {
    this.teamBIsReady = teamBIsReady;
    return this;
  }

   /**
   * Get teamBIsReady
   * @return teamBIsReady
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getTeamBIsReady() {
    return teamBIsReady;
  }

  public void setTeamBIsReady(Boolean teamBIsReady) {
    this.teamBIsReady = teamBIsReady;
  }

  public TournamentMatchModel scoreManuallyReportedDateTime(DateTime scoreManuallyReportedDateTime) {
    this.scoreManuallyReportedDateTime = scoreManuallyReportedDateTime;
    return this;
  }

   /**
   * Get scoreManuallyReportedDateTime
   * @return scoreManuallyReportedDateTime
  **/
  @ApiModelProperty(example = "null", value = "")
  public DateTime getScoreManuallyReportedDateTime() {
    return scoreManuallyReportedDateTime;
  }

  public void setScoreManuallyReportedDateTime(DateTime scoreManuallyReportedDateTime) {
    this.scoreManuallyReportedDateTime = scoreManuallyReportedDateTime;
  }

  public TournamentMatchModel scoreManuallyReported(Boolean scoreManuallyReported) {
    this.scoreManuallyReported = scoreManuallyReported;
    return this;
  }

   /**
   * Get scoreManuallyReported
   * @return scoreManuallyReported
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getScoreManuallyReported() {
    return scoreManuallyReported;
  }

  public void setScoreManuallyReported(Boolean scoreManuallyReported) {
    this.scoreManuallyReported = scoreManuallyReported;
  }

  public TournamentMatchModel scoreManuallyReportedByPlayerId(Long scoreManuallyReportedByPlayerId) {
    this.scoreManuallyReportedByPlayerId = scoreManuallyReportedByPlayerId;
    return this;
  }

   /**
   * Get scoreManuallyReportedByPlayerId
   * @return scoreManuallyReportedByPlayerId
  **/
  @ApiModelProperty(example = "null", value = "")
  public Long getScoreManuallyReportedByPlayerId() {
    return scoreManuallyReportedByPlayerId;
  }

  public void setScoreManuallyReportedByPlayerId(Long scoreManuallyReportedByPlayerId) {
    this.scoreManuallyReportedByPlayerId = scoreManuallyReportedByPlayerId;
  }

  public TournamentMatchModel scoreManuallyReportedByTeamA(Boolean scoreManuallyReportedByTeamA) {
    this.scoreManuallyReportedByTeamA = scoreManuallyReportedByTeamA;
    return this;
  }

   /**
   * Get scoreManuallyReportedByTeamA
   * @return scoreManuallyReportedByTeamA
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getScoreManuallyReportedByTeamA() {
    return scoreManuallyReportedByTeamA;
  }

  public void setScoreManuallyReportedByTeamA(Boolean scoreManuallyReportedByTeamA) {
    this.scoreManuallyReportedByTeamA = scoreManuallyReportedByTeamA;
  }

  public TournamentMatchModel scoreManuallyApplyToEntireRound(Boolean scoreManuallyApplyToEntireRound) {
    this.scoreManuallyApplyToEntireRound = scoreManuallyApplyToEntireRound;
    return this;
  }

   /**
   * Get scoreManuallyApplyToEntireRound
   * @return scoreManuallyApplyToEntireRound
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getScoreManuallyApplyToEntireRound() {
    return scoreManuallyApplyToEntireRound;
  }

  public void setScoreManuallyApplyToEntireRound(Boolean scoreManuallyApplyToEntireRound) {
    this.scoreManuallyApplyToEntireRound = scoreManuallyApplyToEntireRound;
  }

  public TournamentMatchModel mapsPlayed(List<TournamentMatchMapsPlayedModel> mapsPlayed) {
    this.mapsPlayed = mapsPlayed;
    return this;
  }

  public TournamentMatchModel addMapsPlayedItem(TournamentMatchMapsPlayedModel mapsPlayedItem) {
    this.mapsPlayed.add(mapsPlayedItem);
    return this;
  }

   /**
   * Get mapsPlayed
   * @return mapsPlayed
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<TournamentMatchMapsPlayedModel> getMapsPlayed() {
    return mapsPlayed;
  }

  public void setMapsPlayed(List<TournamentMatchMapsPlayedModel> mapsPlayed) {
    this.mapsPlayed = mapsPlayed;
  }

  public TournamentMatchModel dispute(TournamentMatchDisputeModel dispute) {
    this.dispute = dispute;
    return this;
  }

   /**
   * Get dispute
   * @return dispute
  **/
  @ApiModelProperty(example = "null", value = "")
  public TournamentMatchDisputeModel getDispute() {
    return dispute;
  }

  public void setDispute(TournamentMatchDisputeModel dispute) {
    this.dispute = dispute;
  }

  public TournamentMatchModel newServerRequested(Boolean newServerRequested) {
    this.newServerRequested = newServerRequested;
    return this;
  }

   /**
   * Get newServerRequested
   * @return newServerRequested
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getNewServerRequested() {
    return newServerRequested;
  }

  public void setNewServerRequested(Boolean newServerRequested) {
    this.newServerRequested = newServerRequested;
  }

  public TournamentMatchModel newServerRequestedEntityId(Long newServerRequestedEntityId) {
    this.newServerRequestedEntityId = newServerRequestedEntityId;
    return this;
  }

   /**
   * Get newServerRequestedEntityId
   * @return newServerRequestedEntityId
  **/
  @ApiModelProperty(example = "null", value = "")
  public Long getNewServerRequestedEntityId() {
    return newServerRequestedEntityId;
  }

  public void setNewServerRequestedEntityId(Long newServerRequestedEntityId) {
    this.newServerRequestedEntityId = newServerRequestedEntityId;
  }

  public TournamentMatchModel newServerRequestedByTeamA(Boolean newServerRequestedByTeamA) {
    this.newServerRequestedByTeamA = newServerRequestedByTeamA;
    return this;
  }

   /**
   * Get newServerRequestedByTeamA
   * @return newServerRequestedByTeamA
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getNewServerRequestedByTeamA() {
    return newServerRequestedByTeamA;
  }

  public void setNewServerRequestedByTeamA(Boolean newServerRequestedByTeamA) {
    this.newServerRequestedByTeamA = newServerRequestedByTeamA;
  }

  public TournamentMatchModel newServerRequestedCount(Integer newServerRequestedCount) {
    this.newServerRequestedCount = newServerRequestedCount;
    return this;
  }

   /**
   * Get newServerRequestedCount
   * @return newServerRequestedCount
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getNewServerRequestedCount() {
    return newServerRequestedCount;
  }

  public void setNewServerRequestedCount(Integer newServerRequestedCount) {
    this.newServerRequestedCount = newServerRequestedCount;
  }

  public TournamentMatchModel needsAssistance(Boolean needsAssistance) {
    this.needsAssistance = needsAssistance;
    return this;
  }

   /**
   * Get needsAssistance
   * @return needsAssistance
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getNeedsAssistance() {
    return needsAssistance;
  }

  public void setNeedsAssistance(Boolean needsAssistance) {
    this.needsAssistance = needsAssistance;
  }

  public TournamentMatchModel allowedSpectators(String allowedSpectators) {
    this.allowedSpectators = allowedSpectators;
    return this;
  }

   /**
   * Get allowedSpectators
   * @return allowedSpectators
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getAllowedSpectators() {
    return allowedSpectators;
  }

  public void setAllowedSpectators(String allowedSpectators) {
    this.allowedSpectators = allowedSpectators;
  }

  public TournamentMatchModel streamingServiceId(Integer streamingServiceId) {
    this.streamingServiceId = streamingServiceId;
    return this;
  }

   /**
   * Get streamingServiceId
   * @return streamingServiceId
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getStreamingServiceId() {
    return streamingServiceId;
  }

  public void setStreamingServiceId(Integer streamingServiceId) {
    this.streamingServiceId = streamingServiceId;
  }

  public TournamentMatchModel manualMode(Boolean manualMode) {
    this.manualMode = manualMode;
    return this;
  }

   /**
   * Get manualMode
   * @return manualMode
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getManualMode() {
    return manualMode;
  }

  public void setManualMode(Boolean manualMode) {
    this.manualMode = manualMode;
  }

  public TournamentMatchModel manualServerConnectionInfo(String manualServerConnectionInfo) {
    this.manualServerConnectionInfo = manualServerConnectionInfo;
    return this;
  }

   /**
   * Get manualServerConnectionInfo
   * @return manualServerConnectionInfo
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getManualServerConnectionInfo() {
    return manualServerConnectionInfo;
  }

  public void setManualServerConnectionInfo(String manualServerConnectionInfo) {
    this.manualServerConnectionInfo = manualServerConnectionInfo;
  }

  public TournamentMatchModel streamingService(StreamingServiceModel streamingService) {
    this.streamingService = streamingService;
    return this;
  }

   /**
   * Get streamingService
   * @return streamingService
  **/
  @ApiModelProperty(example = "null", value = "")
  public StreamingServiceModel getStreamingService() {
    return streamingService;
  }

  public void setStreamingService(StreamingServiceModel streamingService) {
    this.streamingService = streamingService;
  }

  public TournamentMatchModel assistanceRequests(List<TournamentMatchAssistanceModel> assistanceRequests) {
    this.assistanceRequests = assistanceRequests;
    return this;
  }

  public TournamentMatchModel addAssistanceRequestsItem(TournamentMatchAssistanceModel assistanceRequestsItem) {
    this.assistanceRequests.add(assistanceRequestsItem);
    return this;
  }

   /**
   * Get assistanceRequests
   * @return assistanceRequests
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<TournamentMatchAssistanceModel> getAssistanceRequests() {
    return assistanceRequests;
  }

  public void setAssistanceRequests(List<TournamentMatchAssistanceModel> assistanceRequests) {
    this.assistanceRequests = assistanceRequests;
  }

  public TournamentMatchModel lastUpdatedDateTime(DateTime lastUpdatedDateTime) {
    this.lastUpdatedDateTime = lastUpdatedDateTime;
    return this;
  }

   /**
   * Get lastUpdatedDateTime
   * @return lastUpdatedDateTime
  **/
  @ApiModelProperty(example = "null", value = "")
  public DateTime getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }

  public void setLastUpdatedDateTime(DateTime lastUpdatedDateTime) {
    this.lastUpdatedDateTime = lastUpdatedDateTime;
  }

  public TournamentMatchModel serverConfigurationFileName(String serverConfigurationFileName) {
    this.serverConfigurationFileName = serverConfigurationFileName;
    return this;
  }

   /**
   * Get serverConfigurationFileName
   * @return serverConfigurationFileName
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getServerConfigurationFileName() {
    return serverConfigurationFileName;
  }

  public void setServerConfigurationFileName(String serverConfigurationFileName) {
    this.serverConfigurationFileName = serverConfigurationFileName;
  }

  public TournamentMatchModel matchConnectionInstructions(String matchConnectionInstructions) {
    this.matchConnectionInstructions = matchConnectionInstructions;
    return this;
  }

   /**
   * Get matchConnectionInstructions
   * @return matchConnectionInstructions
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getMatchConnectionInstructions() {
    return matchConnectionInstructions;
  }

  public void setMatchConnectionInstructions(String matchConnectionInstructions) {
    this.matchConnectionInstructions = matchConnectionInstructions;
  }

  public TournamentMatchModel matchAdministratorId(Long matchAdministratorId) {
    this.matchAdministratorId = matchAdministratorId;
    return this;
  }

   /**
   * Get matchAdministratorId
   * @return matchAdministratorId
  **/
  @ApiModelProperty(example = "null", value = "")
  public Long getMatchAdministratorId() {
    return matchAdministratorId;
  }

  public void setMatchAdministratorId(Long matchAdministratorId) {
    this.matchAdministratorId = matchAdministratorId;
  }

  public TournamentMatchModel actionLog(List<TournamentMatchActionLogModel> actionLog) {
    this.actionLog = actionLog;
    return this;
  }

  public TournamentMatchModel addActionLogItem(TournamentMatchActionLogModel actionLogItem) {
    this.actionLog.add(actionLogItem);
    return this;
  }

   /**
   * Get actionLog
   * @return actionLog
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<TournamentMatchActionLogModel> getActionLog() {
    return actionLog;
  }

  public void setActionLog(List<TournamentMatchActionLogModel> actionLog) {
    this.actionLog = actionLog;
  }

  public TournamentMatchModel playback(List<TournamentMatchPlaybackModel> playback) {
    this.playback = playback;
    return this;
  }

  public TournamentMatchModel addPlaybackItem(TournamentMatchPlaybackModel playbackItem) {
    this.playback.add(playbackItem);
    return this;
  }

   /**
   * Get playback
   * @return playback
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<TournamentMatchPlaybackModel> getPlayback() {
    return playback;
  }

  public void setPlayback(List<TournamentMatchPlaybackModel> playback) {
    this.playback = playback;
  }

  public TournamentMatchModel qualifierGroupNumber(Integer qualifierGroupNumber) {
    this.qualifierGroupNumber = qualifierGroupNumber;
    return this;
  }

   /**
   * Get qualifierGroupNumber
   * @return qualifierGroupNumber
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getQualifierGroupNumber() {
    return qualifierGroupNumber;
  }

  public void setQualifierGroupNumber(Integer qualifierGroupNumber) {
    this.qualifierGroupNumber = qualifierGroupNumber;
  }

  public TournamentMatchModel isQualifier(Boolean isQualifier) {
    this.isQualifier = isQualifier;
    return this;
  }

   /**
   * Get isQualifier
   * @return isQualifier
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getIsQualifier() {
    return isQualifier;
  }

  public void setIsQualifier(Boolean isQualifier) {
    this.isQualifier = isQualifier;
  }

  public TournamentMatchModel hasTieBreaker(Boolean hasTieBreaker) {
    this.hasTieBreaker = hasTieBreaker;
    return this;
  }

   /**
   * Get hasTieBreaker
   * @return hasTieBreaker
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getHasTieBreaker() {
    return hasTieBreaker;
  }

  public void setHasTieBreaker(Boolean hasTieBreaker) {
    this.hasTieBreaker = hasTieBreaker;
  }

  public TournamentMatchModel tieBreakerCount(Integer tieBreakerCount) {
    this.tieBreakerCount = tieBreakerCount;
    return this;
  }

   /**
   * Get tieBreakerCount
   * @return tieBreakerCount
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getTieBreakerCount() {
    return tieBreakerCount;
  }

  public void setTieBreakerCount(Integer tieBreakerCount) {
    this.tieBreakerCount = tieBreakerCount;
  }

  public TournamentMatchModel mapVotingResult(TournamentMatchMapVotingModel mapVotingResult) {
    this.mapVotingResult = mapVotingResult;
    return this;
  }

   /**
   * Get mapVotingResult
   * @return mapVotingResult
  **/
  @ApiModelProperty(example = "null", value = "")
  public TournamentMatchMapVotingModel getMapVotingResult() {
    return mapVotingResult;
  }

  public void setMapVotingResult(TournamentMatchMapVotingModel mapVotingResult) {
    this.mapVotingResult = mapVotingResult;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TournamentMatchModel tournamentMatchModel = (TournamentMatchModel) o;
    return Objects.equals(this.tournamentMatchStateId, tournamentMatchModel.tournamentMatchStateId) &&
        Objects.equals(this.tournamentMatchExtendedStateId, tournamentMatchModel.tournamentMatchExtendedStateId) &&
        Objects.equals(this.requireManualScoreReport, tournamentMatchModel.requireManualScoreReport) &&
        Objects.equals(this.tournamentMatchId, tournamentMatchModel.tournamentMatchId) &&
        Objects.equals(this.tournamentId, tournamentMatchModel.tournamentId) &&
        Objects.equals(this.gameTitleId, tournamentMatchModel.gameTitleId) &&
        Objects.equals(this.isTeamTournament, tournamentMatchModel.isTeamTournament) &&
        Objects.equals(this.matchIsAwaitingMapVote, tournamentMatchModel.matchIsAwaitingMapVote) &&
        Objects.equals(this.matchIsLive, tournamentMatchModel.matchIsLive) &&
        Objects.equals(this.matchLiveDateTime, tournamentMatchModel.matchLiveDateTime) &&
        Objects.equals(this.matchIsComplete, tournamentMatchModel.matchIsComplete) &&
        Objects.equals(this.matchCompleteDateTime, tournamentMatchModel.matchCompleteDateTime) &&
        Objects.equals(this.matchIsFinalized, tournamentMatchModel.matchIsFinalized) &&
        Objects.equals(this.matchFinalizedDateTime, tournamentMatchModel.matchFinalizedDateTime) &&
        Objects.equals(this.enableMatchLobby, tournamentMatchModel.enableMatchLobby) &&
        Objects.equals(this.allowCheckin, tournamentMatchModel.allowCheckin) &&
        Objects.equals(this.allowCheckinDateTime, tournamentMatchModel.allowCheckinDateTime) &&
        Objects.equals(this.scheduledStartDateTime, tournamentMatchModel.scheduledStartDateTime) &&
        Objects.equals(this.scheduledForfeitDateTime, tournamentMatchModel.scheduledForfeitDateTime) &&
        Objects.equals(this.entityOwnerId, tournamentMatchModel.entityOwnerId) &&
        Objects.equals(this.entityOwnerProfile, tournamentMatchModel.entityOwnerProfile) &&
        Objects.equals(this.entityParticipantA, tournamentMatchModel.entityParticipantA) &&
        Objects.equals(this.entityParticipantB, tournamentMatchModel.entityParticipantB) &&
        Objects.equals(this.roundNumber, tournamentMatchModel.roundNumber) &&
        Objects.equals(this.roundLevelTypeId, tournamentMatchModel.roundLevelTypeId) &&
        Objects.equals(this.matchNumber, tournamentMatchModel.matchNumber) &&
        Objects.equals(this.numberOfMaps, tournamentMatchModel.numberOfMaps) &&
        Objects.equals(this.mapNumber, tournamentMatchModel.mapNumber) &&
        Objects.equals(this.currentGameTitleMapNameId, tournamentMatchModel.currentGameTitleMapNameId) &&
        Objects.equals(this.gameTitleMapFileName, tournamentMatchModel.gameTitleMapFileName) &&
        Objects.equals(this.gameTitleMapProperName, tournamentMatchModel.gameTitleMapProperName) &&
        Objects.equals(this.gamingServerRegionId, tournamentMatchModel.gamingServerRegionId) &&
        Objects.equals(this.gamingServerRegionName, tournamentMatchModel.gamingServerRegionName) &&
        Objects.equals(this.isBracket, tournamentMatchModel.isBracket) &&
        Objects.equals(this.allowRescheduling, tournamentMatchModel.allowRescheduling) &&
        Objects.equals(this.willBroadcast, tournamentMatchModel.willBroadcast) &&
        Objects.equals(this.broadcastUrl, tournamentMatchModel.broadcastUrl) &&
        Objects.equals(this.automaticGoLiveOnSchedule, tournamentMatchModel.automaticGoLiveOnSchedule) &&
        Objects.equals(this.minutesAfterStartToForfeit, tournamentMatchModel.minutesAfterStartToForfeit) &&
        Objects.equals(this.minutesBeforeStartToAllowCheckin, tournamentMatchModel.minutesBeforeStartToAllowCheckin) &&
        Objects.equals(this.serverSendPlayerSummaryStatistics, tournamentMatchModel.serverSendPlayerSummaryStatistics) &&
        Objects.equals(this.gamingServerId, tournamentMatchModel.gamingServerId) &&
        Objects.equals(this.entityPlayerControllerId, tournamentMatchModel.entityPlayerControllerId) &&
        Objects.equals(this.allTeamAPlayersReady, tournamentMatchModel.allTeamAPlayersReady) &&
        Objects.equals(this.teamAIsReady, tournamentMatchModel.teamAIsReady) &&
        Objects.equals(this.allTeamBPlayersReady, tournamentMatchModel.allTeamBPlayersReady) &&
        Objects.equals(this.teamBIsReady, tournamentMatchModel.teamBIsReady) &&
        Objects.equals(this.scoreManuallyReportedDateTime, tournamentMatchModel.scoreManuallyReportedDateTime) &&
        Objects.equals(this.scoreManuallyReported, tournamentMatchModel.scoreManuallyReported) &&
        Objects.equals(this.scoreManuallyReportedByPlayerId, tournamentMatchModel.scoreManuallyReportedByPlayerId) &&
        Objects.equals(this.scoreManuallyReportedByTeamA, tournamentMatchModel.scoreManuallyReportedByTeamA) &&
        Objects.equals(this.scoreManuallyApplyToEntireRound, tournamentMatchModel.scoreManuallyApplyToEntireRound) &&
        Objects.equals(this.mapsPlayed, tournamentMatchModel.mapsPlayed) &&
        Objects.equals(this.dispute, tournamentMatchModel.dispute) &&
        Objects.equals(this.newServerRequested, tournamentMatchModel.newServerRequested) &&
        Objects.equals(this.newServerRequestedEntityId, tournamentMatchModel.newServerRequestedEntityId) &&
        Objects.equals(this.newServerRequestedByTeamA, tournamentMatchModel.newServerRequestedByTeamA) &&
        Objects.equals(this.newServerRequestedCount, tournamentMatchModel.newServerRequestedCount) &&
        Objects.equals(this.needsAssistance, tournamentMatchModel.needsAssistance) &&
        Objects.equals(this.allowedSpectators, tournamentMatchModel.allowedSpectators) &&
        Objects.equals(this.streamingServiceId, tournamentMatchModel.streamingServiceId) &&
        Objects.equals(this.manualMode, tournamentMatchModel.manualMode) &&
        Objects.equals(this.manualServerConnectionInfo, tournamentMatchModel.manualServerConnectionInfo) &&
        Objects.equals(this.streamingService, tournamentMatchModel.streamingService) &&
        Objects.equals(this.assistanceRequests, tournamentMatchModel.assistanceRequests) &&
        Objects.equals(this.lastUpdatedDateTime, tournamentMatchModel.lastUpdatedDateTime) &&
        Objects.equals(this.serverConfigurationFileName, tournamentMatchModel.serverConfigurationFileName) &&
        Objects.equals(this.matchConnectionInstructions, tournamentMatchModel.matchConnectionInstructions) &&
        Objects.equals(this.matchAdministratorId, tournamentMatchModel.matchAdministratorId) &&
        Objects.equals(this.actionLog, tournamentMatchModel.actionLog) &&
        Objects.equals(this.playback, tournamentMatchModel.playback) &&
        Objects.equals(this.qualifierGroupNumber, tournamentMatchModel.qualifierGroupNumber) &&
        Objects.equals(this.isQualifier, tournamentMatchModel.isQualifier) &&
        Objects.equals(this.hasTieBreaker, tournamentMatchModel.hasTieBreaker) &&
        Objects.equals(this.tieBreakerCount, tournamentMatchModel.tieBreakerCount) &&
        Objects.equals(this.mapVotingResult, tournamentMatchModel.mapVotingResult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tournamentMatchStateId, tournamentMatchExtendedStateId, requireManualScoreReport, tournamentMatchId, tournamentId, gameTitleId, isTeamTournament, matchIsAwaitingMapVote, matchIsLive, matchLiveDateTime, matchIsComplete, matchCompleteDateTime, matchIsFinalized, matchFinalizedDateTime, enableMatchLobby, allowCheckin, allowCheckinDateTime, scheduledStartDateTime, scheduledForfeitDateTime, entityOwnerId, entityOwnerProfile, entityParticipantA, entityParticipantB, roundNumber, roundLevelTypeId, matchNumber, numberOfMaps, mapNumber, currentGameTitleMapNameId, gameTitleMapFileName, gameTitleMapProperName, gamingServerRegionId, gamingServerRegionName, isBracket, allowRescheduling, willBroadcast, broadcastUrl, automaticGoLiveOnSchedule, minutesAfterStartToForfeit, minutesBeforeStartToAllowCheckin, serverSendPlayerSummaryStatistics, gamingServerId, entityPlayerControllerId, allTeamAPlayersReady, teamAIsReady, allTeamBPlayersReady, teamBIsReady, scoreManuallyReportedDateTime, scoreManuallyReported, scoreManuallyReportedByPlayerId, scoreManuallyReportedByTeamA, scoreManuallyApplyToEntireRound, mapsPlayed, dispute, newServerRequested, newServerRequestedEntityId, newServerRequestedByTeamA, newServerRequestedCount, needsAssistance, allowedSpectators, streamingServiceId, manualMode, manualServerConnectionInfo, streamingService, assistanceRequests, lastUpdatedDateTime, serverConfigurationFileName, matchConnectionInstructions, matchAdministratorId, actionLog, playback, qualifierGroupNumber, isQualifier, hasTieBreaker, tieBreakerCount, mapVotingResult);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TournamentMatchModel {\n");
    
    sb.append("    tournamentMatchStateId: ").append(toIndentedString(tournamentMatchStateId)).append("\n");
    sb.append("    tournamentMatchExtendedStateId: ").append(toIndentedString(tournamentMatchExtendedStateId)).append("\n");
    sb.append("    requireManualScoreReport: ").append(toIndentedString(requireManualScoreReport)).append("\n");
    sb.append("    tournamentMatchId: ").append(toIndentedString(tournamentMatchId)).append("\n");
    sb.append("    tournamentId: ").append(toIndentedString(tournamentId)).append("\n");
    sb.append("    gameTitleId: ").append(toIndentedString(gameTitleId)).append("\n");
    sb.append("    isTeamTournament: ").append(toIndentedString(isTeamTournament)).append("\n");
    sb.append("    matchIsAwaitingMapVote: ").append(toIndentedString(matchIsAwaitingMapVote)).append("\n");
    sb.append("    matchIsLive: ").append(toIndentedString(matchIsLive)).append("\n");
    sb.append("    matchLiveDateTime: ").append(toIndentedString(matchLiveDateTime)).append("\n");
    sb.append("    matchIsComplete: ").append(toIndentedString(matchIsComplete)).append("\n");
    sb.append("    matchCompleteDateTime: ").append(toIndentedString(matchCompleteDateTime)).append("\n");
    sb.append("    matchIsFinalized: ").append(toIndentedString(matchIsFinalized)).append("\n");
    sb.append("    matchFinalizedDateTime: ").append(toIndentedString(matchFinalizedDateTime)).append("\n");
    sb.append("    enableMatchLobby: ").append(toIndentedString(enableMatchLobby)).append("\n");
    sb.append("    allowCheckin: ").append(toIndentedString(allowCheckin)).append("\n");
    sb.append("    allowCheckinDateTime: ").append(toIndentedString(allowCheckinDateTime)).append("\n");
    sb.append("    scheduledStartDateTime: ").append(toIndentedString(scheduledStartDateTime)).append("\n");
    sb.append("    scheduledForfeitDateTime: ").append(toIndentedString(scheduledForfeitDateTime)).append("\n");
    sb.append("    entityOwnerId: ").append(toIndentedString(entityOwnerId)).append("\n");
    sb.append("    entityOwnerProfile: ").append(toIndentedString(entityOwnerProfile)).append("\n");
    sb.append("    entityParticipantA: ").append(toIndentedString(entityParticipantA)).append("\n");
    sb.append("    entityParticipantB: ").append(toIndentedString(entityParticipantB)).append("\n");
    sb.append("    roundNumber: ").append(toIndentedString(roundNumber)).append("\n");
    sb.append("    roundLevelTypeId: ").append(toIndentedString(roundLevelTypeId)).append("\n");
    sb.append("    matchNumber: ").append(toIndentedString(matchNumber)).append("\n");
    sb.append("    numberOfMaps: ").append(toIndentedString(numberOfMaps)).append("\n");
    sb.append("    mapNumber: ").append(toIndentedString(mapNumber)).append("\n");
    sb.append("    currentGameTitleMapNameId: ").append(toIndentedString(currentGameTitleMapNameId)).append("\n");
    sb.append("    gameTitleMapFileName: ").append(toIndentedString(gameTitleMapFileName)).append("\n");
    sb.append("    gameTitleMapProperName: ").append(toIndentedString(gameTitleMapProperName)).append("\n");
    sb.append("    gamingServerRegionId: ").append(toIndentedString(gamingServerRegionId)).append("\n");
    sb.append("    gamingServerRegionName: ").append(toIndentedString(gamingServerRegionName)).append("\n");
    sb.append("    isBracket: ").append(toIndentedString(isBracket)).append("\n");
    sb.append("    allowRescheduling: ").append(toIndentedString(allowRescheduling)).append("\n");
    sb.append("    willBroadcast: ").append(toIndentedString(willBroadcast)).append("\n");
    sb.append("    broadcastUrl: ").append(toIndentedString(broadcastUrl)).append("\n");
    sb.append("    automaticGoLiveOnSchedule: ").append(toIndentedString(automaticGoLiveOnSchedule)).append("\n");
    sb.append("    minutesAfterStartToForfeit: ").append(toIndentedString(minutesAfterStartToForfeit)).append("\n");
    sb.append("    minutesBeforeStartToAllowCheckin: ").append(toIndentedString(minutesBeforeStartToAllowCheckin)).append("\n");
    sb.append("    serverSendPlayerSummaryStatistics: ").append(toIndentedString(serverSendPlayerSummaryStatistics)).append("\n");
    sb.append("    gamingServerId: ").append(toIndentedString(gamingServerId)).append("\n");
    sb.append("    entityPlayerControllerId: ").append(toIndentedString(entityPlayerControllerId)).append("\n");
    sb.append("    allTeamAPlayersReady: ").append(toIndentedString(allTeamAPlayersReady)).append("\n");
    sb.append("    teamAIsReady: ").append(toIndentedString(teamAIsReady)).append("\n");
    sb.append("    allTeamBPlayersReady: ").append(toIndentedString(allTeamBPlayersReady)).append("\n");
    sb.append("    teamBIsReady: ").append(toIndentedString(teamBIsReady)).append("\n");
    sb.append("    scoreManuallyReportedDateTime: ").append(toIndentedString(scoreManuallyReportedDateTime)).append("\n");
    sb.append("    scoreManuallyReported: ").append(toIndentedString(scoreManuallyReported)).append("\n");
    sb.append("    scoreManuallyReportedByPlayerId: ").append(toIndentedString(scoreManuallyReportedByPlayerId)).append("\n");
    sb.append("    scoreManuallyReportedByTeamA: ").append(toIndentedString(scoreManuallyReportedByTeamA)).append("\n");
    sb.append("    scoreManuallyApplyToEntireRound: ").append(toIndentedString(scoreManuallyApplyToEntireRound)).append("\n");
    sb.append("    mapsPlayed: ").append(toIndentedString(mapsPlayed)).append("\n");
    sb.append("    dispute: ").append(toIndentedString(dispute)).append("\n");
    sb.append("    newServerRequested: ").append(toIndentedString(newServerRequested)).append("\n");
    sb.append("    newServerRequestedEntityId: ").append(toIndentedString(newServerRequestedEntityId)).append("\n");
    sb.append("    newServerRequestedByTeamA: ").append(toIndentedString(newServerRequestedByTeamA)).append("\n");
    sb.append("    newServerRequestedCount: ").append(toIndentedString(newServerRequestedCount)).append("\n");
    sb.append("    needsAssistance: ").append(toIndentedString(needsAssistance)).append("\n");
    sb.append("    allowedSpectators: ").append(toIndentedString(allowedSpectators)).append("\n");
    sb.append("    streamingServiceId: ").append(toIndentedString(streamingServiceId)).append("\n");
    sb.append("    manualMode: ").append(toIndentedString(manualMode)).append("\n");
    sb.append("    manualServerConnectionInfo: ").append(toIndentedString(manualServerConnectionInfo)).append("\n");
    sb.append("    streamingService: ").append(toIndentedString(streamingService)).append("\n");
    sb.append("    assistanceRequests: ").append(toIndentedString(assistanceRequests)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("    serverConfigurationFileName: ").append(toIndentedString(serverConfigurationFileName)).append("\n");
    sb.append("    matchConnectionInstructions: ").append(toIndentedString(matchConnectionInstructions)).append("\n");
    sb.append("    matchAdministratorId: ").append(toIndentedString(matchAdministratorId)).append("\n");
    sb.append("    actionLog: ").append(toIndentedString(actionLog)).append("\n");
    sb.append("    playback: ").append(toIndentedString(playback)).append("\n");
    sb.append("    qualifierGroupNumber: ").append(toIndentedString(qualifierGroupNumber)).append("\n");
    sb.append("    isQualifier: ").append(toIndentedString(isQualifier)).append("\n");
    sb.append("    hasTieBreaker: ").append(toIndentedString(hasTieBreaker)).append("\n");
    sb.append("    tieBreakerCount: ").append(toIndentedString(tieBreakerCount)).append("\n");
    sb.append("    mapVotingResult: ").append(toIndentedString(mapVotingResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

