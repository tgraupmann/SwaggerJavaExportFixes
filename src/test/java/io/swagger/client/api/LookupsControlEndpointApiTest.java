/*
 * Polling API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ResponseOutputModelListAddressCountryModel;
import io.swagger.client.model.ResponseOutputModelListString;
import io.swagger.client.model.ResponseOutputModelListGameTitleCallbackTemplateModel;
import io.swagger.client.model.ResponseOutputModelListGameTitleValidationMethodTypeModel;
import io.swagger.client.model.ResponseOutputModelListGamingServerRegionModel;
import io.swagger.client.model.ResponseOutputModelListPlayerRankingLevel;
import io.swagger.client.model.ResponseOutputModelListTournamentRoundRuleMapVotingStyleModel;
import io.swagger.client.model.ResponseOutputModelListTeamRosterRoleModel;
import io.swagger.client.model.ResponseOutputModelListTournamentQualifierTieBreakerTypeModel;
import io.swagger.client.model.ResponseOutputModelListStreamingServiceModel;
import io.swagger.client.model.ResponseOutputModelListTournamentJoinTypeModel;
import io.swagger.client.model.ResponseOutputModelListTournamentPairingTypeModel;
import io.swagger.client.model.ResponseOutputModelListTournamentPrizeFundingTypeModel;
import io.swagger.client.model.ResponseOutputModelListTournamentSeedingTypeModel;
import io.swagger.client.model.ResponseOutputModelListTournamentTypeModel;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LookupsControlEndpointApi
 */
public class LookupsControlEndpointApiTest {

    private final LookupsControlEndpointApi api = new LookupsControlEndpointApi();

    
    /**
     * Return list of all countries supported.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsCountryListTest() throws ApiException {
        // ResponseOutputModelListAddressCountryModel response = api.lookupsCountryList();

        // TODO: test validations
    }
    
    /**
     * Return a list of all game platforms.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsGamePlatformsTest() throws ApiException {
        // ResponseOutputModelListString response = api.lookupsGamePlatforms();

        // TODO: test validations
    }
    
    /**
     * Return a list of all game join schemas.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsGameTitleCallbackTemplatesTest() throws ApiException {
        // ResponseOutputModelListGameTitleCallbackTemplateModel response = api.lookupsGameTitleCallbackTemplates();

        // TODO: test validations
    }
    
    /**
     * Return a list of all player validation types.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsGameTitleValidationMethodTypesTest() throws ApiException {
        // ResponseOutputModelListGameTitleValidationMethodTypeModel response = api.lookupsGameTitleValidationMethodTypes();

        // TODO: test validations
    }
    
    /**
     * Return a list of all game server region classifications.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsGamingServerRegionsTest() throws ApiException {
        // ResponseOutputModelListGamingServerRegionModel response = api.lookupsGamingServerRegions();

        // TODO: test validations
    }
    
    /**
     * Return a list of all Arena Ranking Levels
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsGetArenaRankListTest() throws ApiException {
        // ResponseOutputModelListPlayerRankingLevel response = api.lookupsGetArenaRankList();

        // TODO: test validations
    }
    
    /**
     * Return a list of all round rule map voting and veto types.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsGetMapVotingTypesTest() throws ApiException {
        // ResponseOutputModelListTournamentRoundRuleMapVotingStyleModel response = api.lookupsGetMapVotingTypes();

        // TODO: test validations
    }
    
    /**
     * Return a list of all team roster roles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsGetRosterRolesTest() throws ApiException {
        // ResponseOutputModelListTeamRosterRoleModel response = api.lookupsGetRosterRoles();

        // TODO: test validations
    }
    
    /**
     * Return list of all tournament privacy types.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsQualifierTieBreakerTypesTest() throws ApiException {
        // ResponseOutputModelListTournamentQualifierTieBreakerTypeModel response = api.lookupsQualifierTieBreakerTypes();

        // TODO: test validations
    }
    
    /**
     * Return a list of all video streaming services.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsStreamingServicesTest() throws ApiException {
        // ResponseOutputModelListStreamingServiceModel response = api.lookupsStreamingServices();

        // TODO: test validations
    }
    
    /**
     * Return list of all tournament privacy types.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsTournamentJoinTypesTest() throws ApiException {
        // ResponseOutputModelListTournamentJoinTypeModel response = api.lookupsTournamentJoinTypes();

        // TODO: test validations
    }
    
    /**
     * Return a list of all tournament pairing types
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsTournamentPairingTypesTest() throws ApiException {
        // ResponseOutputModelListTournamentPairingTypeModel response = api.lookupsTournamentPairingTypes();

        // TODO: test validations
    }
    
    /**
     * Return a list of all tournament funding types.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsTournamentPrizeFundingTypesTest() throws ApiException {
        // ResponseOutputModelListTournamentPrizeFundingTypeModel response = api.lookupsTournamentPrizeFundingTypes();

        // TODO: test validations
    }
    
    /**
     * Return a list of all bracket seeding methods.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsTournamentSeedingTypesTest() throws ApiException {
        // ResponseOutputModelListTournamentSeedingTypeModel response = api.lookupsTournamentSeedingTypes();

        // TODO: test validations
    }
    
    /**
     * Return a list of all tournament lifecycle types.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsTournamentTypesTest() throws ApiException {
        // ResponseOutputModelListTournamentTypeModel response = api.lookupsTournamentTypes();

        // TODO: test validations
    }
    
}
