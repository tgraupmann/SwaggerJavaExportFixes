/*
 * Polling API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ResponseOutputModelPlayerRankingLevel;
import io.swagger.client.model.ResponseOutputModelBoolean;
import io.swagger.client.model.ResponseOutputModelInt64;
import io.swagger.client.model.ResponseOutputModelTournamentMatchMyActiveMatchModel;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlayerControlEndpointApi
 */
public class PlayerControlEndpointApiTest {

    private final PlayerControlEndpointApi api = new PlayerControlEndpointApi();

    
    /**
     * Lookup Arena rank of the logged in player
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void playerGetRankTest() throws ApiException {
        // ResponseOutputModelPlayerRankingLevel response = api.playerGetRank();

        // TODO: test validations
    }
    
    /**
     * Lookup whether the logged in player is a SysAdmin
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void playerIsAdminTest() throws ApiException {
        // ResponseOutputModelBoolean response = api.playerIsAdmin();

        // TODO: test validations
    }
    
    /**
     * Get the latest Match ID for the logged in player
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void playerLastMatchIdTest() throws ApiException {
        // ResponseOutputModelInt64 response = api.playerLastMatchId();

        // TODO: test validations
    }
    
    /**
     * Get the match ready for check-in for the logged in player, if exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void playerMyActiveMatchTest() throws ApiException {
        // ResponseOutputModelTournamentMatchMyActiveMatchModel response = api.playerMyActiveMatch();

        // TODO: test validations
    }
    
}
